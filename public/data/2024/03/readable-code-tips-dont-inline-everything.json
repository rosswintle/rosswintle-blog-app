{
    "id": 255130,
    "date": "2024-03-30T23:24:17",
    "date_gmt": "2024-03-30T23:24:17",
    "guid": {
        "rendered": "https:\/\/rosswintle.uk\/?p=255130"
    },
    "modified": "2024-04-11T13:11:51",
    "modified_gmt": "2024-04-11T12:11:51",
    "slug": "readable-code-tips-dont-inline-everything",
    "status": "publish",
    "type": "post",
    "link": "https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/",
    "title": {
        "rendered": "Readable code tips: Don&#8217;t inline everything!"
    },
    "content": {
        "rendered": "\n<p><em>Previous Tip: <a href=\"https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-extract-complex-conditions\/\">Extract complex conditionals<\/a><\/em><\/p>\n\n\n\n<p>There is a balance to be found between &#8220;inlining&#8221; multiple expressions, and using temporary variables.<\/p>\n\n\n\n<p>This example uses lots of nicely named variables. But it&#8217;s like a wall of code that&#8217;s actually hard to read and surprisingly hard to reason about.<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: php; auto-links: false; gutter: false; title: ; quick-code: false; notranslate\" title=\"\">\nfunction isExistingTextFile($filename) {\n    $isEmptyFilename = ! is_empty($filename);\n    $isValidFilename =  strlen($filename) &gt; 5;\n    $isNonEmptyValidFilename = $isEmptyFilename &amp;&amp; $isValidFilename;\n    $filenameHasTextExtension = pathinfo($filename, PATHINFO_EXTENSION) === 'txt';\n    $fileExists = file_exists($filename);\n    $isValidTextFilename = $isNonEmptyValidFilename &amp;&amp; $fileNameHasTextExtension;\n    $isTextFile = $isValidTextFilename &amp;&amp; $fileExists;\n    return $isTextFile;\n}\n<\/pre><\/div>\n\n\n<p>One possible way to fix this is to say &#8220;Well, this is really just one condition. A single expression. Let&#8217;s just inline everything and return it:<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: php; auto-links: false; gutter: false; title: ; quick-code: false; notranslate\" title=\"\">\nfunction isExistingTextFile($filename) {\n    return ! is_empty($filename) &amp;&amp; strlen($filename) &gt; 5 &amp;&amp; pathinfo($filename, PATHINFO_EXTENSION) === 'txt' &amp;&amp; file_exists($filename);\n}\n<\/pre><\/div>\n\n\n<p>And on the face of it this is much nicer. But for me, this is the other extreme. It&#8217;s still actually kinda hard to read. I think that a good, well-named intermediate variable can actually help break down a multi-part expression like this.<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: php; auto-links: false; gutter: false; title: ; quick-code: false; notranslate\" title=\"\">\nfunction isExistingTextFile($filename) {\n\t$isValidFilename = ! is_empty($filename) &amp;&amp; strlen($filename) &gt; 5;\n\t$isTxtFile = $isValidFilename &amp;&amp; pathinfo($filename, PATHINFO_EXTENSION) === 'txt';\n\treturn $isTxtFile &amp;&amp; file_exists($filename);\n}\n<\/pre><\/div>\n\n\n<p>I think this is a nice middle ground with the final <code>return<\/code> being a readable statement of what we want to check for. And working our way back up the expressions we can see how each is also readable. In my opinion at least.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Bonus: A quick primer on short-circuit evaluation!<\/h2>\n\n\n\n<p>Now&#8230; to that &#8220;hard to reason about&#8221; piece. Why is this code hard to reason about? It seems pretty simple?<\/p>\n\n\n\n<p>Well if you&#8217;ve not heard of short-circuit evaluation, it&#8217;s worth finding out about.<\/p>\n\n\n\n<p>Boolean expressions can be made more efficient using short-circuit evaluation. When this happens, the computer runs the minimum number of checks required to complete the evaluation of the expression.<\/p>\n\n\n\n<p>There&#8217;s some words in there. Maybe that means nothing to you. So let&#8217;s look at an example.<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: php; auto-links: false; gutter: false; title: ; quick-code: false; notranslate\" title=\"\">\n$result = complexFunction1() &amp;&amp; complexFunction2();\n<\/pre><\/div>\n\n\n<p>Because we&#8217;re using <code>&amp;&amp;<\/code>, we don&#8217;t always have to call both functions.<\/p>\n\n\n\n<p>If the result of the first function is <code>false<\/code> then the whole thing is false. So <code>complexFunction2()<\/code> doesn&#8217;t <em>need<\/em> to be called to get the result. And in many programming languages, including PHP and JavaScript, it is <em>not<\/em> called.<\/p>\n\n\n\n<p>Wait? What?! You might be thinking.<\/p>\n\n\n\n<p>Yeah, this can be pretty powerful and we need to be careful with it.<\/p>\n\n\n\n<p>Imagine that these two complex function calls involve slow operations, say, database queries or API requests. It could be much quicker to only call the first function.<\/p>\n\n\n\n<p>Consider this case:<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: php; auto-links: false; gutter: false; title: ; quick-code: false; notranslate\" title=\"\">\n$result = createPost() &amp;&amp; publishPost();\n<\/pre><\/div>\n\n\n<p>In this case short-circuit evaluation helps us because if <code>createPost()<\/code> fails then <code>publishPost()<\/code> will also fail. But short-circuit evaluation means we don&#8217;t call <code>publishPost()<\/code>, which could save us time.<\/p>\n\n\n\n<p>Now what if we extracted variables here?<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: php; auto-links: false; gutter: false; title: ; quick-code: false; notranslate\" title=\"\">\n$isPostCreated = createPost();\n$isPostPublished = publishPost();\n$result = $isPostCreated &amp;&amp; $isPostPublished;\n<\/pre><\/div>\n\n\n<p>This is slightly contrived, and probably not what you would do. But if we did do this then <code>publishPost()<\/code> is ALWAYS called on the second line, even if <code>createPost()<\/code>fails and returns false.<\/p>\n\n\n\n<p>Note that short-circuit evaluation also works for <code>||<\/code> conditions, but backwards:<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: php; auto-links: false; gutter: false; title: ; quick-code: false; notranslate\" title=\"\">\n$result = complexFunction1() || complexFunction2();\n<\/pre><\/div>\n\n\n<p>Here if <code>complexFunction1()<\/code> is <code>true<\/code> then the whole expression will always be <code>true<\/code> and we don&#8217;t need to call <code>complexFunction2()<\/code> to determine that, and so it&#8217;s not called.<\/p>\n\n\n\n<p>So there might be a benefit to our fully-inlined version:<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: php; auto-links: false; gutter: false; title: ; quick-code: false; notranslate\" title=\"\">\nfunction isExistingTextFile($filename) {\n    return ! is_empty($filename) &amp;&amp; strlen($filename) &gt; 5 &amp;&amp; pathinfo($filename, PATHINFO_EXTENSION) === 'txt' &amp;&amp; file_exists($filename);\n}\n<\/pre><\/div>\n\n\n<p>because if we fail any step, the subsequent steps are not executed at all.<\/p>\n\n\n\n<p>I shall leave it up to the reader to look at the example code at the top of this post and try to figure out what is called and when. Did the code work differently as we inlined and then un-inlined the parts of the expression?<\/p>\n",
        "protected": false
    },
    "excerpt": {
        "rendered": "<p>There is a balance to be found between &#8220;inlining&#8221; multiple expressions, and using temporary variables. You may also learn about short-circuit evaluation here!<\/p>\n",
        "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "closed",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": {
        "sig_custom_text": "",
        "sig_image_type": "featured-image",
        "sig_custom_image": 0,
        "sig_is_disabled": false,
        "url": "",
        "footnotes": ""
    },
    "categories": [
        23
    ],
    "tags": [
        286
    ],
    "yoast_head": "<!-- This site is optimized with the Yoast SEO plugin v22.5 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Readable code tips: Don&#039;t inline everything! - Ross Wintle<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/\" \/>\n<meta property=\"og:locale\" content=\"en_GB\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Readable code tips: Don&#039;t inline everything! - Ross Wintle\" \/>\n<meta property=\"og:description\" content=\"There is a balance to be found between &quot;inlining&quot; multiple expressions, and using temporary variables. You may also learn about short-circuit evaluation here!\" \/>\n<meta property=\"og:url\" content=\"https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/\" \/>\n<meta property=\"og:site_name\" content=\"Ross Wintle\" \/>\n<meta property=\"article:published_time\" content=\"2024-03-30T23:24:17+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2024-04-11T12:11:51+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/rosswintle.uk\/wp-content\/uploads\/2012\/06\/DSC_0005-small.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"600\" \/>\n\t<meta property=\"og:image:height\" content=\"399\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/jpeg\" \/>\n<meta name=\"author\" content=\"Ross Wintle\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@magicroundabout\" \/>\n<meta name=\"twitter:site\" content=\"@magicroundabout\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Ross Wintle\" \/>\n\t<meta name=\"twitter:label2\" content=\"Estimated reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/\",\"url\":\"https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/\",\"name\":\"Readable code tips: Don't inline everything! - Ross Wintle\",\"isPartOf\":{\"@id\":\"https:\/\/rosswintle.uk\/#website\"},\"datePublished\":\"2024-03-30T23:24:17+00:00\",\"dateModified\":\"2024-04-11T12:11:51+00:00\",\"author\":{\"@id\":\"https:\/\/rosswintle.uk\/#\/schema\/person\/9f9bec147b2bfd762f09a2c2da7177dc\"},\"breadcrumb\":{\"@id\":\"https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/#breadcrumb\"},\"inLanguage\":\"en-GB\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/rosswintle.uk\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Readable code tips: Don&#8217;t inline everything!\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/rosswintle.uk\/#website\",\"url\":\"https:\/\/rosswintle.uk\/\",\"name\":\"Ross Wintle\",\"description\":\"Creativity, curiosity, and code\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/rosswintle.uk\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-GB\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/rosswintle.uk\/#\/schema\/person\/9f9bec147b2bfd762f09a2c2da7177dc\",\"name\":\"Ross Wintle\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-GB\",\"@id\":\"https:\/\/rosswintle.uk\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/28519fc7c37998eea059b525da5fc7ce?s=96&d=identicon&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/28519fc7c37998eea059b525da5fc7ce?s=96&d=identicon&r=g\",\"caption\":\"Ross Wintle\"},\"url\":\"https:\/\/rosswintle.uk\/author\/rosswintle\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->",
    "yoast_head_json": {
        "title": "Readable code tips: Don't inline everything! - Ross Wintle",
        "robots": {
            "index": "index",
            "follow": "follow",
            "max-snippet": "max-snippet:-1",
            "max-image-preview": "max-image-preview:large",
            "max-video-preview": "max-video-preview:-1"
        },
        "canonical": "https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/",
        "og_locale": "en_GB",
        "og_type": "article",
        "og_title": "Readable code tips: Don't inline everything! - Ross Wintle",
        "og_description": "There is a balance to be found between \"inlining\" multiple expressions, and using temporary variables. You may also learn about short-circuit evaluation here!",
        "og_url": "https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/",
        "og_site_name": "Ross Wintle",
        "article_published_time": "2024-03-30T23:24:17+00:00",
        "article_modified_time": "2024-04-11T12:11:51+00:00",
        "og_image": [
            {
                "width": "600",
                "height": "399",
                "url": "https:\/\/rosswintle.uk\/wp-content\/uploads\/2012\/06\/DSC_0005-small.jpg",
                "type": "image\/jpeg"
            }
        ],
        "author": "Ross Wintle",
        "twitter_card": "summary_large_image",
        "twitter_creator": "@magicroundabout",
        "twitter_site": "@magicroundabout",
        "twitter_misc": {
            "Written by": "Ross Wintle",
            "Estimated reading time": "3 minutes"
        },
        "schema": {
            "@context": "https:\/\/schema.org",
            "@graph": [
                {
                    "@type": "WebPage",
                    "@id": "https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/",
                    "url": "https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/",
                    "name": "Readable code tips: Don't inline everything! - Ross Wintle",
                    "isPartOf": {
                        "@id": "https:\/\/rosswintle.uk\/#website"
                    },
                    "datePublished": "2024-03-30T23:24:17+00:00",
                    "dateModified": "2024-04-11T12:11:51+00:00",
                    "author": {
                        "@id": "https:\/\/rosswintle.uk\/#\/schema\/person\/9f9bec147b2bfd762f09a2c2da7177dc"
                    },
                    "breadcrumb": {
                        "@id": "https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/#breadcrumb"
                    },
                    "inLanguage": "en-GB",
                    "potentialAction": [
                        {
                            "@type": "ReadAction",
                            "target": [
                                "https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/"
                            ]
                        }
                    ]
                },
                {
                    "@type": "BreadcrumbList",
                    "@id": "https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/#breadcrumb",
                    "itemListElement": [
                        {
                            "@type": "ListItem",
                            "position": 1,
                            "name": "Home",
                            "item": "https:\/\/rosswintle.uk\/"
                        },
                        {
                            "@type": "ListItem",
                            "position": 2,
                            "name": "Readable code tips: Don&#8217;t inline everything!"
                        }
                    ]
                },
                {
                    "@type": "WebSite",
                    "@id": "https:\/\/rosswintle.uk\/#website",
                    "url": "https:\/\/rosswintle.uk\/",
                    "name": "Ross Wintle",
                    "description": "Creativity, curiosity, and code",
                    "potentialAction": [
                        {
                            "@type": "SearchAction",
                            "target": {
                                "@type": "EntryPoint",
                                "urlTemplate": "https:\/\/rosswintle.uk\/?s={search_term_string}"
                            },
                            "query-input": "required name=search_term_string"
                        }
                    ],
                    "inLanguage": "en-GB"
                },
                {
                    "@type": "Person",
                    "@id": "https:\/\/rosswintle.uk\/#\/schema\/person\/9f9bec147b2bfd762f09a2c2da7177dc",
                    "name": "Ross Wintle",
                    "image": {
                        "@type": "ImageObject",
                        "inLanguage": "en-GB",
                        "@id": "https:\/\/rosswintle.uk\/#\/schema\/person\/image\/",
                        "url": "https:\/\/secure.gravatar.com\/avatar\/28519fc7c37998eea059b525da5fc7ce?s=96&d=identicon&r=g",
                        "contentUrl": "https:\/\/secure.gravatar.com\/avatar\/28519fc7c37998eea059b525da5fc7ce?s=96&d=identicon&r=g",
                        "caption": "Ross Wintle"
                    },
                    "url": "https:\/\/rosswintle.uk\/author\/rosswintle\/"
                }
            ]
        }
    },
    "_links": {
        "self": [
            {
                "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/posts\/255130"
            }
        ],
        "collection": [
            {
                "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/posts"
            }
        ],
        "about": [
            {
                "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/types\/post"
            }
        ],
        "author": [
            {
                "embeddable": true,
                "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/users\/2"
            }
        ],
        "replies": [
            {
                "embeddable": true,
                "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/comments?post=255130"
            }
        ],
        "version-history": [
            {
                "count": 3,
                "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/posts\/255130\/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 255183,
                "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/posts\/255130\/revisions\/255183"
            }
        ],
        "wp:attachment": [
            {
                "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/media?parent=255130"
            }
        ],
        "wp:term": [
            {
                "taxonomy": "category",
                "embeddable": true,
                "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/categories?post=255130"
            },
            {
                "taxonomy": "post_tag",
                "embeddable": true,
                "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/tags?post=255130"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https:\/\/api.w.org\/{rel}",
                "templated": true
            }
        ]
    }
}