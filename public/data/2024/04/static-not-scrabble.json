{
    "id": 255187,
    "date": "2024-04-14T22:43:49",
    "date_gmt": "2024-04-14T21:43:49",
    "guid": {
        "rendered": "https:\/\/rosswintle.uk\/?p=255187"
    },
    "modified": "2024-04-14T22:45:48",
    "modified_gmt": "2024-04-14T21:45:48",
    "slug": "static-not-scrabble",
    "status": "publish",
    "type": "post",
    "link": "https:\/\/rosswintle.uk\/2024\/04\/static-not-scrabble\/",
    "title": {
        "rendered": "Static not-Scrabble."
    },
    "content": {
        "rendered": "\n<h2 class=\"wp-block-heading\">I made a completely free Scrabble-like game!<\/h2>\n\n\n\n<p>Pretty much all the online Scrabble games I&#8217;ve played are bloated, ad-ridden, gamified things that need sign-ups and stuff to play. I hate all this. I just want to play games without all the crud.<\/p>\n\n\n\n<p>I make <a href=\"https:\/\/rosswintle.uk\/2024\/02\/a-manifesto-for-small-static-web-apps\/\">simple web apps<\/a>. So why can&#8217;t I make a Scrabble clone?<\/p>\n\n\n\n<p>And I did! It&#8217;s still early days. Things don&#8217;t work or are broken. There are things it doesn&#8217;t do right. But this is kinda playable right now. Before you let me know things are broken please see if <a href=\"https:\/\/github.com\/rosswintle\/static-word-game\/issues\">I already know about it<\/a>.<\/p>\n\n\n\n<p><a href=\"https:\/\/words.pico.games\/\">https:\/\/words.pico.games\/<\/a><\/p>\n\n\n\n<p>Sure, this is not the BEST Scrabble clone. But it&#8217;s free, needs no sign up, has no ads. There are no catches. I just use <a href=\"https:\/\/usefathom.com\/ref\/SVE71E\">Fathom Analytics<\/a> to collect minimal, anonymised usage stats. That&#8217;s it! You can just play!<\/p>\n\n\n\n<p>But there&#8217;s something about it that the computer nerds will find interesting. I think. Read on if you want to know how this works because a static-file, multiplayer game without a login or database&#8230; how does that work?<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">How DOES it work? <\/h2>\n\n\n\n<p>Ages ago I heard a thing on a podcast, and I can&#8217;t even remember what it was, that made me wonder if you could have an online, multi-player, turn-based game where the game state is encoded in URLs and you just swap URLs with other people using messaging to take turns.<\/p>\n\n\n\n<p>You could prove this with something very simple like tic-tac-toe. But that seemed TOO simple. And I love word games. So Scrabble seemed to be a reasonable step up.<\/p>\n\n\n\n<p>What you are about to read is a technical deep-dive on encoding Scrabble games in URLs. This is kinda computer-sciencey stuff including binary representations of data, bitwise operations, and JavaScript &#8220;BigInts&#8221;. I hope it&#8217;s interesting to someone!<\/p>\n\n\n\n<p><em>Aside: Scrabble(TM) is owned by Mattel and Hasbro and they have enforced their copyright over some aspects of the game in the past, so I&#8217;m cautious about naming it and using anything of the game that may be copyrighted.<\/em><\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Computer Science &#8211; a quick primer on binary representations<\/h2>\n\n\n\n<p>We don&#8217;t talk a lot about &#8220;bits&#8221; in web development. The high-level languages we use, the speed of processing, and the memory we have available in computers nowadays means we don&#8217;t have to think about it much. But I want to do something <em>super<\/em> efficient here, so I&#8217;m turning to binary encoding.<\/p>\n\n\n\n<p>Under the hood, our computers use binary &#8211; 0&#8217;s and 1&#8217;s to represent data.<\/p>\n\n\n\n<p>Whole numbers usually translate pretty directly. Zero is <code>0<\/code> in binary. Eight is <code>1000<\/code>. Thirteen is <code>1101<\/code>. I won&#8217;t go into why here. But bigger numbers take up more bits.<\/p>\n\n\n\n<p>Boolean &#8220;true\/false&#8221; values can be represented in just a single bit!<\/p>\n\n\n\n<p>Letters and characters? Well, they are also converted to numbers. Numbers are really all that we&#8217;ve got. And computers use standardised codes for this. Major standards for encoding text are ASCII and Unicode (sometimes known as UTF).<\/p>\n\n\n\n<p>ASCII is pretty simple. Each character is given a number that fits into, say, 7 bits. 7 bits gives you numbers up to 128. That lets you have lower case and upper case Latin alphabet that we use for English, digits 0-9 and still have 66 slots for punctuation and other stuff.<\/p>\n\n\n\n<p><em>Aside: This is fine for English, but in the global world there&#8217;s a huge number of other characters we might want to use, and Unicode includes all sorts of non-Latin characters and all the emoji!<\/em><\/p>\n\n\n\n<p>But what if you don&#8217;t need punctuation? In Scrabble you only need single-case letters (and blanks) on your tiles. That&#8217;s 27 options. And 27 options fit into just 5 bits. So can we just do that?<\/p>\n\n\n\n<p>Of course you can!<\/p>\n\n\n\n<p>In fact, if you know what the &#8220;shape&#8221; of your data is, you can really efficiently &#8220;encode&#8221; it in Binary.<\/p>\n\n\n\n<p>I&#8217;m going to propose, below, that data for a &#8220;player&#8221; in Scrabble is:<\/p>\n\n\n\n<ul class=\"wp-block-list\">\n<li>A score that is a number between 0 and 1000<\/li>\n\n\n\n<li>A &#8220;rack&#8221; of tiles, that is a list of 7 letters<\/li>\n<\/ul>\n\n\n\n<p>We know this data &#8220;shape&#8221;. So if we can somehow manipulate individual bits we can store a player as a single string of bits. 10 bits for the score. And 5 bits for each letter. 45 bits in total.<\/p>\n\n\n\n<p>This then raises questions though. Like, what if a player is at the end of the game and only has 4 tiles? Well, we can either use one of the spare (not-a-letter) 5-bit values to mean &#8220;empty&#8221;. OR&#8230; we could add another bit of data that says how many letters there are and only store those letters. The number 7 can be represented in 3 bits (<code>111<\/code>) so a player could be:<\/p>\n\n\n\n<ul class=\"wp-block-list\">\n<li>A score that is a number between 0 and 1000 (10 bits)<\/li>\n\n\n\n<li>A count of the number of tiles in the rack (3 bits)<\/li>\n\n\n\n<li>A &#8220;rack&#8221; of tiles, that is a list of <em>up to<\/em> 7 letters (5 bits each)<\/li>\n<\/ul>\n\n\n\n<p>There&#8217;s a trade off here. If we have 7 letters then we&#8217;re adding 3 bits for the count.<\/p>\n\n\n\n<p>But if we have less than 7 letters, we <em>save<\/em> at least 2 bits (5 fewer bits for a letter, but 3 added for the count). A player with just one tile saves 27 bits!<\/p>\n\n\n\n<p>This is all super-nerdy stuff. But hopefully you see what I&#8217;m trying to do here.<\/p>\n\n\n\n<p>There is an issue though, and that&#8217;s that the languages we use on the web don&#8217;t necessarily make it easy to work with individual bits. I&#8217;ll come back to this later.<\/p>\n\n\n\n<p>In the meantime, given we know we can use bits in this way, how can we represent a Scrabble game?<\/p>\n\n\n\n<p>If you think this is all very interesting then I can highly recommend Julia Evan&#8217;s &#8220;Zine&#8221; (small-comic-book format) called &#8220;<a href=\"https:\/\/wizardzines.com\/zines\/integers-floats\/\">How Integers and Floats Work<\/a>&#8220;, and you can tinker with binary codes and numbers using her simple <a href=\"https:\/\/integer.exposed\/\">integer.exposed<\/a> tool.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Minimal Scrabble game representations<\/h2>\n\n\n\n<p>I started by wondering what the smallest way to represent a Scrabble-like game was. I don&#8217;t want URLs to get too long as I pass the game state around. So how can I do this efficiently?<\/p>\n\n\n\n<p>Things you COULD store are:<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">The board.<\/h3>\n\n\n\n<p>This is a 15&#215;15 square grid where each square can be empty or contain a letter.<\/p>\n\n\n\n<p>A letter can be one of 26 things, or a blank (which is different to empty!). If we do a minimal binary representation, this fits into 5 bits.<\/p>\n\n\n\n<p>Representing the whole board would take up up to 1,125 bits. That 161, 7-bit ASCII characters.<\/p>\n\n\n\n<p>Could you compress this? Maybe by encoding multiple empty spaces somehow? Maybe. But that gets complicated.<\/p>\n\n\n\n<p>What else do we need?<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">The Players<\/h3>\n\n\n\n<p>Players have a tile rack &#8211; that&#8217;s up to 7 lots of 5-bits-per-tile. So 35 bits.<\/p>\n\n\n\n<p>Players also have a score. That could be up to 1000, so let&#8217;s give that 10 bits.<\/p>\n\n\n\n<p>I&#8217;ll ignore names for now. I think we can do without that. Is that it? I think it is, as moves will be separate.<\/p>\n\n\n\n<p>So a player can be up to 45 bits each. That&#8217;s 7, 7-bit ASCII characters.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">The Tile Bag<\/h3>\n\n\n\n<p>You could choose to store the tile bag. There are 100 tiles, so this would be 100 * 5 = 500 bits.<\/p>\n\n\n\n<p>That&#8217;s another 72, 7-bit ASCII characters.<\/p>\n\n\n\n<p>Summing up, if you were to store data in this way: board state, player state and tile bag, that&#8217;s a total of 1,715 bits, or 245 characters. Not bad I suppose.<\/p>\n\n\n\n<p>There may be some efficiencies to be gained somewhere. But it would either:<\/p>\n\n\n\n<ul class=\"wp-block-list\">\n<li>Be very minimal on average; or<\/li>\n\n\n\n<li>Add complexity to the encoding<\/li>\n<\/ul>\n\n\n\n<p>But it feels like there&#8217;s some data duplication here. Perhaps we can do better?<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Alternative: Store the Moves<\/h3>\n\n\n\n<p>Rather than storing the board and the player scores, we could just store a list of moves. This may be more efficient. But it may also be hard to tell.<\/p>\n\n\n\n<p>A list of moves can be &#8220;played back&#8221; onto the board to get player scores and the board state.<\/p>\n\n\n\n<p>You also don&#8217;t need to maintain a tile bag. The &#8220;full bag&#8221; minus all the used tiles (in players hands or on the board) gives you the tiles remaining. You can shuffle them whenever you like. You don&#8217;t have to keep the original shuffled order &#8211; that doesn&#8217;t affect the game.<\/p>\n\n\n\n<p>So what does a move look like? It can be tricky because a move can &#8220;wrap&#8221; around other letters or words on the board.<\/p>\n\n\n\n<p>There&#8217;s three options:<\/p>\n\n\n\n<ol class=\"wp-block-list\">\n<li>Combine a starting point co-ordinate on the board with the entire word played. Oh, you&#8217;ll need a flag to say if it&#8217;s across or down too. For a 5-letter word, this would be 2 * 4-bit co-ordinates, a 1-bit flag, and 5 * 5-bit tiles. That&#8217;s 34 bits in total for a 5-letter word.<\/li>\n\n\n\n<li>Same as 1, but you only store the played tiles, and you skip existing tiles when you replay moves onto the board. That might reduce the storage from option 1 by a bit (for some moves, by a LOT!)<\/li>\n\n\n\n<li>Have a list of played tiles, each with their coordinates. This would be 2 * 4-bit co-ordinates and a 5-bit tile per letter played. So 13 bits per letter, or 65 bits for a 5-letter word.<\/li>\n<\/ol>\n\n\n\n<p>Option 3 seems inefficient, especially for longer words.<\/p>\n\n\n\n<p>Option 2, in hindsight seems best. But I didn&#8217;t consider it at the time.<\/p>\n\n\n\n<p>So I went with option 1.<\/p>\n\n\n\n<p>The internet says that the average number of words played in a game seems to be between 16 and 22 per player. It feels like a low-move game would have longer words. There&#8217;s 100 tiles. A 34-move game averages very close to 3 tiles per move. So that&#8217;s 8 + 1 + (3 * 5) = 24 bits per move, and 34 * 24 = 816 bits for an average-looking game.<\/p>\n\n\n\n<p>This is better than storing a 1,125-bit board. It will vary per game, but we&#8217;ve reduced the ASCII character representation to 117 characters from 161. That&#8217;s pretty good.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">A conclusion on game storage<\/h3>\n\n\n\n<p>So a minimal data set is:<\/p>\n\n\n\n<ul class=\"wp-block-list\">\n<li>Array of moves at 5<em>n<\/em> + 9 bits per move and an average-looking game using around 816 bits.<\/li>\n\n\n\n<li>Player tile &#8220;racks&#8221; at 5 * 7 = 35 bits each. 70 bits total.<\/li>\n<\/ul>\n\n\n\n<p>That&#8217;s it. Everything else &#8211; the board, the tile bag, the scores, can all be derived from this.<\/p>\n\n\n\n<p>Is this the most efficient way? I wouldn&#8217;t really know without some experimentation or writing some complicated formulae. There may be games where another encoding works better. But this seems good to me.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Working with bits in JavaScript<\/h2>\n\n\n\n<p>As I said before, it&#8217;s not entirely easy working with individual bits in modern web development languages.<\/p>\n\n\n\n<p>I&#8217;m making a Scrabble-like web app, so JavaScript is the language I have to hand.<\/p>\n\n\n\n<p>JavaScript <em>does<\/em> provide operators for working with bits. But the difficulty is that its types are more abstract\/high level. And the JavaScript <code>Number<\/code> type doesn&#8217;t directly map whole numbers into Binary. All numbers in JavaScript are actually &#8220;floating point&#8221;, which means <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Number#number_encoding\">they are stored in a complicated format<\/a> that&#8217;s suitable for both whole numbers (&#8220;integers&#8221;) and decimal numbers.<\/p>\n\n\n\n<p>HOWEVER&#8230; while I was thinking about this I remembered that JavaScript has a &#8220;<a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/BigInt\">BigInt<\/a>&#8221; type for storing &#8220;Big Integers&#8221;. This sounds good. We need integers really.<\/p>\n\n\n\n<p>And BigInt&#8217;s support <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Operators#bitwise_shift_operators\">binary (&#8220;bitwise&#8221;) operators<\/a> like shifts (which move binary numbers left and right) and logical AND \/ OR. These are exactly what we need, and it seems that a BigInt is almost unlimited in size, and so a single BigInt can represent a Player, a Move, or an entire game!!<\/p>\n\n\n\n<p>This is exactly what I need.<\/p>\n\n\n\n<p><em>And just to note again, if you think this is all very interesting then I can highly recommend Julia Evan&#8217;s &#8220;Zine&#8221; (small-comic-book format) called &#8220;<a href=\"https:\/\/wizardzines.com\/zines\/integers-floats\/\">How Integers and Floats Work<\/a>&#8220;, and you can tinker with binary codes and numbers using her simple <a href=\"https:\/\/integer.exposed\/\">integer.exposed<\/a> tool.<\/em><\/p>\n\n\n\n<h2 class=\"wp-block-heading\">A small library class for bitwise manipulation of BigInts<\/h2>\n\n\n\n<p>The BigInt&#8217;s worked out GREAT!<\/p>\n\n\n\n<p>But I found myself doing a lot of what I called &#8220;push&#8221; and &#8220;pop&#8221;, of bits like with Arrays. Like, &#8220;Here&#8217;s a number that&#8217;s less than 15. It&#8217;s 3 bits long. Please &#8220;push&#8221; it onto the right-hand side of my BigInt.<\/p>\n\n\n\n<p>(A push &#8220;left shifts&#8221; the bits of the BigInt to the left and then does a logical OR to add the new bits on. A pull does a logical &#8220;AND&#8221; of the BigInt with a mask like <code>1111111<\/code> to get the popped value, and then &#8220;right shifts&#8221; the BigInt to move everything along.)<\/p>\n\n\n\n<p>Abstracting this made my encoding and decoding work much easier. And I included functions\/methods to convert the BigInt to and from both ASCII (7 bits at a time!) and then also into Base64, which can be sent in a URL! YAY!<\/p>\n\n\n\n<p>You can see that little helper class in <a href=\"https:\/\/gist.github.com\/rosswintle\/94f7778a2cad77eb4520490ed61d99e1\">this Gist<\/a>.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Making the game work<\/h2>\n\n\n\n<p>With all that binary data representation done, I could get on with building the game.<\/p>\n\n\n\n<p>It turns out that complex game UI and logic can be a bit tricky. I&#8217;ve got the game to a state where it works in it&#8217;s basic form. It&#8217;s playable. And that&#8217;s great.<\/p>\n\n\n\n<p>I could write a whole other post about all the user interface concerns and algorithms for doing stuff.<\/p>\n\n\n\n<p>I mean, it&#8217;s not <strong>hard<\/strong> hard. It&#8217;s not Tears of the Kingdom or Call of Duty. But for a little web-based side-project? There&#8217;s been a lot to think about.<\/p>\n\n\n\n<p>Right now I&#8217;m doing some simple play testing of the mechanic of sending links back and forth. Interestingly, most of the feedback I&#8217;ve had has either been about Scrabble stuff that I&#8217;ve not implemented yet, or about the UI. No one has really complained that sending links back and forth over messenger is annoying. So that&#8217;s good.<\/p>\n\n\n\n<p>Why not give it a go? It&#8217;s at <a href=\"https:\/\/words.pico.games\/\">https:\/\/words.pico.games\/<\/a>, and it&#8217;s totally free. <\/p>\n\n\n\n<p>Let me know what you think, but be sure to check GitHub issues before you report anything to see if I already know about it.<\/p>\n\n\n\n<p>Enjoy!<\/p>\n\n\n\n<ol class=\"wp-block-list\"><\/ol>\n",
        "protected": false
    },
    "excerpt": {
        "rendered": "<p>I made a server-less Scrabble clone that saves data in URLs. This post explains why and how, including a primer on binary data representations, and a little JavaScript library to help do this using BigInts!<\/p>\n",
        "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "closed",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": {
        "sig_custom_text": "",
        "sig_image_type": "featured-image",
        "sig_custom_image": 0,
        "sig_is_disabled": false,
        "url": "",
        "footnotes": ""
    },
    "categories": [
        23
    ],
    "tags": [
        286,
        666,
        618,
        107,
        16236
    ],
    "class_list": [
        "post-255187",
        "post",
        "type-post",
        "status-publish",
        "format-standard",
        "hentry",
        "category-techie",
        "tag-coding",
        "tag-fun",
        "tag-games",
        "tag-javascript",
        "tag-scrabble"
    ],
    "yoast_head": "<!-- This site is optimized with the Yoast SEO plugin v23.6 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Static not-Scrabble. - Ross Wintle<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/rosswintle.uk\/2024\/04\/static-not-scrabble\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Static not-Scrabble. - Ross Wintle\" \/>\n<meta property=\"og:description\" content=\"I made a server-less Scrabble clone that saves data in URLs. This post explains why and how, including a primer on binary data representations, and a little JavaScript library to help do this using BigInts!\" \/>\n<meta property=\"og:url\" content=\"https:\/\/rosswintle.uk\/2024\/04\/static-not-scrabble\/\" \/>\n<meta property=\"og:site_name\" content=\"Ross Wintle\" \/>\n<meta property=\"article:published_time\" content=\"2024-04-14T21:43:49+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2024-04-14T21:45:48+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/rosswintle.uk\/wp-content\/uploads\/2012\/06\/DSC_0005-small.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"600\" \/>\n\t<meta property=\"og:image:height\" content=\"399\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/jpeg\" \/>\n<meta name=\"author\" content=\"Ross Wintle\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@magicroundabout\" \/>\n<meta name=\"twitter:site\" content=\"@magicroundabout\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Ross Wintle\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"11 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/rosswintle.uk\/2024\/04\/static-not-scrabble\/\",\"url\":\"https:\/\/rosswintle.uk\/2024\/04\/static-not-scrabble\/\",\"name\":\"Static not-Scrabble. - Ross Wintle\",\"isPartOf\":{\"@id\":\"https:\/\/rosswintle.uk\/#website\"},\"datePublished\":\"2024-04-14T21:43:49+00:00\",\"dateModified\":\"2024-04-14T21:45:48+00:00\",\"author\":{\"@id\":\"https:\/\/rosswintle.uk\/#\/schema\/person\/9f9bec147b2bfd762f09a2c2da7177dc\"},\"breadcrumb\":{\"@id\":\"https:\/\/rosswintle.uk\/2024\/04\/static-not-scrabble\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/rosswintle.uk\/2024\/04\/static-not-scrabble\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/rosswintle.uk\/2024\/04\/static-not-scrabble\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/rosswintle.uk\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Static not-Scrabble.\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/rosswintle.uk\/#website\",\"url\":\"https:\/\/rosswintle.uk\/\",\"name\":\"Ross Wintle\",\"description\":\"Creativity, curiosity, and code\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/rosswintle.uk\/?s={search_term_string}\"},\"query-input\":{\"@type\":\"PropertyValueSpecification\",\"valueRequired\":true,\"valueName\":\"search_term_string\"}}],\"inLanguage\":\"en-US\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/rosswintle.uk\/#\/schema\/person\/9f9bec147b2bfd762f09a2c2da7177dc\",\"name\":\"Ross Wintle\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/rosswintle.uk\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/28519fc7c37998eea059b525da5fc7ce?s=96&d=identicon&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/28519fc7c37998eea059b525da5fc7ce?s=96&d=identicon&r=g\",\"caption\":\"Ross Wintle\"},\"url\":\"https:\/\/rosswintle.uk\/author\/rosswintle\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->",
    "yoast_head_json": {
        "title": "Static not-Scrabble. - Ross Wintle",
        "robots": {
            "index": "index",
            "follow": "follow",
            "max-snippet": "max-snippet:-1",
            "max-image-preview": "max-image-preview:large",
            "max-video-preview": "max-video-preview:-1"
        },
        "canonical": "https:\/\/rosswintle.uk\/2024\/04\/static-not-scrabble\/",
        "og_locale": "en_US",
        "og_type": "article",
        "og_title": "Static not-Scrabble. - Ross Wintle",
        "og_description": "I made a server-less Scrabble clone that saves data in URLs. This post explains why and how, including a primer on binary data representations, and a little JavaScript library to help do this using BigInts!",
        "og_url": "https:\/\/rosswintle.uk\/2024\/04\/static-not-scrabble\/",
        "og_site_name": "Ross Wintle",
        "article_published_time": "2024-04-14T21:43:49+00:00",
        "article_modified_time": "2024-04-14T21:45:48+00:00",
        "og_image": [
            {
                "width": 600,
                "height": 399,
                "url": "https:\/\/rosswintle.uk\/wp-content\/uploads\/2012\/06\/DSC_0005-small.jpg",
                "type": "image\/jpeg"
            }
        ],
        "author": "Ross Wintle",
        "twitter_card": "summary_large_image",
        "twitter_creator": "@magicroundabout",
        "twitter_site": "@magicroundabout",
        "twitter_misc": {
            "Written by": "Ross Wintle",
            "Est. reading time": "11 minutes"
        },
        "schema": {
            "@context": "https:\/\/schema.org",
            "@graph": [
                {
                    "@type": "WebPage",
                    "@id": "https:\/\/rosswintle.uk\/2024\/04\/static-not-scrabble\/",
                    "url": "https:\/\/rosswintle.uk\/2024\/04\/static-not-scrabble\/",
                    "name": "Static not-Scrabble. - Ross Wintle",
                    "isPartOf": {
                        "@id": "https:\/\/rosswintle.uk\/#website"
                    },
                    "datePublished": "2024-04-14T21:43:49+00:00",
                    "dateModified": "2024-04-14T21:45:48+00:00",
                    "author": {
                        "@id": "https:\/\/rosswintle.uk\/#\/schema\/person\/9f9bec147b2bfd762f09a2c2da7177dc"
                    },
                    "breadcrumb": {
                        "@id": "https:\/\/rosswintle.uk\/2024\/04\/static-not-scrabble\/#breadcrumb"
                    },
                    "inLanguage": "en-US",
                    "potentialAction": [
                        {
                            "@type": "ReadAction",
                            "target": [
                                "https:\/\/rosswintle.uk\/2024\/04\/static-not-scrabble\/"
                            ]
                        }
                    ]
                },
                {
                    "@type": "BreadcrumbList",
                    "@id": "https:\/\/rosswintle.uk\/2024\/04\/static-not-scrabble\/#breadcrumb",
                    "itemListElement": [
                        {
                            "@type": "ListItem",
                            "position": 1,
                            "name": "Home",
                            "item": "https:\/\/rosswintle.uk\/"
                        },
                        {
                            "@type": "ListItem",
                            "position": 2,
                            "name": "Static not-Scrabble."
                        }
                    ]
                },
                {
                    "@type": "WebSite",
                    "@id": "https:\/\/rosswintle.uk\/#website",
                    "url": "https:\/\/rosswintle.uk\/",
                    "name": "Ross Wintle",
                    "description": "Creativity, curiosity, and code",
                    "potentialAction": [
                        {
                            "@type": "SearchAction",
                            "target": {
                                "@type": "EntryPoint",
                                "urlTemplate": "https:\/\/rosswintle.uk\/?s={search_term_string}"
                            },
                            "query-input": {
                                "@type": "PropertyValueSpecification",
                                "valueRequired": true,
                                "valueName": "search_term_string"
                            }
                        }
                    ],
                    "inLanguage": "en-US"
                },
                {
                    "@type": "Person",
                    "@id": "https:\/\/rosswintle.uk\/#\/schema\/person\/9f9bec147b2bfd762f09a2c2da7177dc",
                    "name": "Ross Wintle",
                    "image": {
                        "@type": "ImageObject",
                        "inLanguage": "en-US",
                        "@id": "https:\/\/rosswintle.uk\/#\/schema\/person\/image\/",
                        "url": "https:\/\/secure.gravatar.com\/avatar\/28519fc7c37998eea059b525da5fc7ce?s=96&d=identicon&r=g",
                        "contentUrl": "https:\/\/secure.gravatar.com\/avatar\/28519fc7c37998eea059b525da5fc7ce?s=96&d=identicon&r=g",
                        "caption": "Ross Wintle"
                    },
                    "url": "https:\/\/rosswintle.uk\/author\/rosswintle\/"
                }
            ]
        }
    },
    "_links": {
        "self": [
            {
                "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/posts\/255187"
            }
        ],
        "collection": [
            {
                "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/posts"
            }
        ],
        "about": [
            {
                "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/types\/post"
            }
        ],
        "author": [
            {
                "embeddable": true,
                "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/users\/2"
            }
        ],
        "replies": [
            {
                "embeddable": true,
                "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/comments?post=255187"
            }
        ],
        "version-history": [
            {
                "count": 6,
                "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/posts\/255187\/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 255195,
                "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/posts\/255187\/revisions\/255195"
            }
        ],
        "wp:attachment": [
            {
                "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/media?parent=255187"
            }
        ],
        "wp:term": [
            {
                "taxonomy": "category",
                "embeddable": true,
                "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/categories?post=255187"
            },
            {
                "taxonomy": "post_tag",
                "embeddable": true,
                "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/tags?post=255187"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https:\/\/api.w.org\/{rel}",
                "templated": true
            }
        ]
    }
}