{
    "id": 10050,
    "date": "2021-03-26T10:49:01",
    "date_gmt": "2021-03-26T10:49:01",
    "guid": {
        "rendered": "https:\/\/rosswintle.uk\/?p=10050"
    },
    "modified": "2021-05-14T10:21:13",
    "modified_gmt": "2021-05-14T09:21:13",
    "slug": "css-only-spam-prevention-allow-list-captcha",
    "status": "publish",
    "type": "post",
    "link": "https:\/\/rosswintle.uk\/2021\/03\/css-only-spam-prevention-allow-list-captcha\/",
    "title": {
        "rendered": "Idea: CSS-only spam prevention with a simple allow-list and CAPTCHA"
    },
    "content": {
        "rendered": "\n<p>I have a client with a WordPress site who is getting lots of spam form submissions. For a long time I have used Ben Marshall&#8217;s excellent <a href=\"https:\/\/wordpress.org\/plugins\/zero-spam\/\">WordPress Zero Spam plugin<\/a>, which was originally a simple implementation of a <a href=\"https:\/\/davidwalsh.name\/wordpress-comment-spam\">simple idea from David Walsh<\/a> for preventing spam.<\/p>\n\n\n\n<p>David&#8217;s idea was kinda like a reverse honeypot. A traditional honeypot is a hidden HTML input that is empty. It tempts the bots into filling it in with a value. Because it&#8217;s hidden a human won&#8217;t see it and fill it in, so a submitted honeypot value probably means a bot filled the form in.<\/p>\n\n\n\n<p>David Walsh used JavaScript to ADD an input to the form, and the spam test was to detect this additional input. All this really did was say &#8220;this form was submitted by a browser that runs JavaScript&#8221;.<\/p>\n\n\n\n<p>There are two problems with this method.<\/p>\n\n\n\n<p>Firstly, it requires JavaScript to be working.<\/p>\n\n\n\n<p>And secondly, spam is clearly an arms race, and the game is to stay one step ahead of the bots. Most bots, it seems, aren&#8217;t currently running headless browsers that run JavaScript. I always though the David Walsh method would soon be defeated but it&#8217;s been working well for the many years I&#8217;ve been using it.<\/p>\n\n\n\n<p>BUT&#8230; Ben Marshall (note: I&#8217;m REALLY grateful for Ben&#8217;s work and I have every respect for him) removed the David Walsh method from version 5 of his plugin, and then added it back in, but it only currently seems to work for comment forms and WordPress registration forms. And I need it to integrate with WP Forms and Gravity Forms.<\/p>\n\n\n\n<p>Another implementation of the David Walsh method exists in <a href=\"https:\/\/twitter.com\/binarymoon\">Ben Gillbanks<\/a>&#8216;s excellent, multi-purpose &#8220;<a href=\"https:\/\/wordpress.org\/plugins\/wp-toolbelt\/\">Toolbelt<\/a>&#8221; plugin. But this only works for Gravity Forms and Jetpack in addition to the standard WordPress forms.<\/p>\n\n\n\n<p>NOW&#8230; both these plugins are open source, so I could pull-request the features I need into the plugins. And I may do that, but it will take time to understand the plugin structure and add it and get the changes approved and published by the authors.<\/p>\n\n\n\n<p>My client needs a quick fix.<\/p>\n\n\n\n<p>And it&#8217;s always bugged me that JavaScript is needed for the David Walsh method. So I got thinking&#8230; can we do something without JavaScript?<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">An idea<\/h2>\n\n\n\n<p>So here&#8217;s the idea.<\/p>\n\n\n\n<p>As the bots don&#8217;t seem to be running browsers, I assume they are just scraping the form, figuring out the input fields, and POST&#8217;ing responses to the action URLs.<\/p>\n\n\n\n<p>So I thought: we don&#8217;t want JavaScript, but what might we do with CSS? I eventually settled on the idea that we can load an image with CSS and this can hit a server endpoint. If we can do this conditionally based on some user action then we can tell the server we are real.<\/p>\n\n\n\n<p>The server can then add the IP address of the browser to an allow list temporarily (we&#8217;ll come back to this) and allow form submissions from it!<\/p>\n\n\n\n<p>Initially I thought you could use the &#8220;active&#8221; state on the submit button element to trigger a load of a background image &#8220;pixel&#8221; on an adjacent element using something like:<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: css; title: ; notranslate\" title=\"\">\ninput&#x5B;type=&quot;submit&quot;]:active + .pixel {\n  background-image: url(&lt;pixel-url&gt;);\n}\n<\/pre><\/div>\n\n\n<p>I chose <code>active<\/code> over <code>focus<\/code> because I wasn&#8217;t sure if a mobile device button press would trigger focus.<\/p>\n\n\n\n<p>The problem with <code>active<\/code> is: does this give enough time before the form submits to do the allow-listing that the pixel URL\/endpoint does?<\/p>\n\n\n\n<p>In my tests the answer was no. I thought I would get a race condition, but it actually seemed that the browser cancelled the background-image load to submit the form.<\/p>\n\n\n\n<p>So I needed another approach.<\/p>\n\n\n\n<p>I eventually discovered the <code>focus-within<\/code> state. This state is set on an element when any child element has focus. And this meant that I could load the pixel and do the allow-listing when the user is filling in the form using CSS like this:<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: css; title: ; notranslate\" title=\"\">\nform:focus-within .pixel {\n  background-image: url(&lt;pixel-url&gt;);\n}\n<\/pre><\/div>\n\n\n<p>We can then use the pixel URL endpoint to add the browser&#8217;s IP address to the allow-list for a set period of time (would have to be long enough for the user to fill in the form), and then check the allow list when the form is submitted.<\/p>\n\n\n\n<p>I initially tested this as a proof of concept with a simple Laravel application form:<\/p>\n\n\n\n<figure class=\"wp-block-embed is-type-video is-provider-vimeo wp-block-embed-vimeo wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\n<iframe loading=\"lazy\" title=\"CSS only spam\/allow-listing CAPTCHA thingy proof of concept\" src=\"https:\/\/player.vimeo.com\/video\/529274399?dnt=1&amp;app_id=122963\" width=\"640\" height=\"340\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture; clipboard-write\"><\/iframe>\n<\/div><\/figure>\n\n\n\n<p>This worked and proved the concept. But as a real test I needed to get it quickly onto my client&#8217;s site that had lots of spam, so I quickly cooked up <a href=\"https:\/\/gist.github.com\/rosswintle\/0f65bea09a59b19d4486f190c46198bb\">a one-file WordPress plugin<\/a> that integrated this method with WP Forms.<\/p>\n\n\n\n<p>I tested this locally with success:<\/p>\n\n\n\n<figure class=\"wp-block-embed is-type-video is-provider-vimeo wp-block-embed-vimeo wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\n<iframe loading=\"lazy\" title=\"CSS only spam\/allow-listing captcha thingy in WP Forms\" src=\"https:\/\/player.vimeo.com\/video\/529279362?dnt=1&amp;app_id=122963\" width=\"640\" height=\"326\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture; clipboard-write\"><\/iframe>\n<\/div><\/figure>\n\n\n\n<p>And then deployed to the client site to see what happened. I wait to see if it works.<\/p>\n\n\n\n<p>Update: My client has had two days with no spam, the logs I&#8217;m creating show that spam is being blocked, and we&#8217;re also seeing genuine enquiries getting through. It WORKS!! (I think!!)<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Questions and explanations<\/h2>\n\n\n\n<p>Here are some things I&#8217;ve got questions about and some things that I&#8217;ve already thought through.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">How is this better than a traditional honeypot?<\/h3>\n\n\n\n<p>Bots seem to have figured out how to circumvent some traditional honeypots. I&#8217;ve always found the David Walsh technique to be more effective.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">How is this better than the David Walsh technique?<\/h3>\n\n\n\n<p>It doesn&#8217;t use JavaScript. And it&#8217;s MINE!<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Storing the allow-list<\/h3>\n\n\n\n<p>This, like all spam-prevention solutions, is not perfect. For one thing I&#8217;m using transients to store the allow-listed IP addresses. The reason for this is that if I stored a single option with a list of IP addresses in then this could have race conditions that caused IP addresses to not make it on the list. This will clutter up the options table with transient entries. So I need to re-think that.<\/p>\n\n\n\n<p>Generating a testing a nonce has been suggested as an alternative. These are not stored in the database so are cleaner. But there&#8217;s probably page-caching issues. I will investigate this.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Won&#8217;t bots just allow-list themselves by hitting the pixel URL?<\/h3>\n\n\n\n<p>I guess the idea here is that this is not a widely-known spam prevention measure. The aim is to get another step ahead of the bots. The bots go for the easy wins &#8211; they attack the holes that are likely to get them access across a large number of sites. So diversity of spam prevention solutions seems good.<\/p>\n\n\n\n<p>I think I could get another step ahead by periodically changing the pixel URL and the class name on the pixel element.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Won&#8217;t this stop working once bots start using headless browsers?<\/h3>\n\n\n\n<p>Yes. But I think at that point, aside from implementing proper (Re)CAPTCHAs, I think we&#8217;re probably screwed.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Accessibility and screen-readers and browser support<\/h3>\n\n\n\n<p>I probably need to make a couple of accessibility improvements, mainly properly hiding the pixel element from screen readers.<\/p>\n\n\n\n<p>I&#8217;m also not sure how this will work with some screen readers. Can I assume that screen readers set the focus state? Do screen readers support the focus-within state?<\/p>\n\n\n\n<p>And focus-within doesn&#8217;t work on IE11.<\/p>\n\n\n\n<p>One thought I&#8217;d has is that you could detect focus and enable the pixel using Javascript as well as CSS. Then CSS acts as a fallback for when Javascript isn&#8217;t available.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">What if CSS is disabled<\/h3>\n\n\n\n<p>It seems this can be done. But I wonder what the probably that both CSS and JS are unavailable in the real world is? My CSS is inlined, so it doesn&#8217;t need an extra file to be loaded. The only case would be if someone had deliberately disabled CSS. Does anyone do that?<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Are there privacy\/data protection\/GDPR issues?<\/h3>\n\n\n\n<p>IP addresses are classed as personal data. But if someone&#8217;s sending you a form submission then you&#8217;re probably already collecting personal data. I would just be clear in our the privacy policy that the IP address is stored temporarily for spam prevention purposes. <\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Will you be making this into a WordPress plugin\/Laravel package?<\/h3>\n\n\n\n<p>Well, you can see <a href=\"https:\/\/gist.github.com\/rosswintle\/0f65bea09a59b19d4486f190c46198bb\">the simple WordPress plugin code I got working with WP Forms<\/a>. That&#8217;s currently being tested on a site that I know gets spam form entries.<\/p>\n\n\n\n<p>You can take that and try to make your own integrations\/plugins\/packages. I&#8217;d love people to take this concept and run with it.<\/p>\n\n\n\n<p><\/p>\n",
        "protected": false
    },
    "excerpt": {
        "rendered": "<p>An idea for a CSS-only spam prevention system that uses a white list and simple CAPTCHA, complete with WordPress plugin code.<\/p>\n",
        "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "closed",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": {
        "sig_custom_text": "",
        "sig_image_type": "featured-image",
        "sig_custom_image": 0,
        "sig_is_disabled": false,
        "url": "",
        "footnotes": ""
    },
    "categories": [
        10,
        23,
        639
    ],
    "tags": [
        534,
        462
    ],
    "yoast_head": "<!-- This site is optimized with the Yoast SEO plugin v22.5 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Idea: CSS-only spam prevention with a simple allow-list and CAPTCHA - Ross Wintle<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/rosswintle.uk\/2021\/03\/css-only-spam-prevention-allow-list-captcha\/\" \/>\n<meta property=\"og:locale\" content=\"en_GB\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Idea: CSS-only spam prevention with a simple allow-list and CAPTCHA - Ross Wintle\" \/>\n<meta property=\"og:description\" content=\"An idea for a CSS-only spam prevention system that uses a white list and simple CAPTCHA, complete with WordPress plugin code.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/rosswintle.uk\/2021\/03\/css-only-spam-prevention-allow-list-captcha\/\" \/>\n<meta property=\"og:site_name\" content=\"Ross Wintle\" \/>\n<meta property=\"article:published_time\" content=\"2021-03-26T10:49:01+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2021-05-14T09:21:13+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/rosswintle.uk\/wp-content\/uploads\/2012\/06\/DSC_0005-small.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"600\" \/>\n\t<meta property=\"og:image:height\" content=\"399\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/jpeg\" \/>\n<meta name=\"author\" content=\"Ross Wintle\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@magicroundabout\" \/>\n<meta name=\"twitter:site\" content=\"@magicroundabout\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Ross Wintle\" \/>\n\t<meta name=\"twitter:label2\" content=\"Estimated reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"6 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/rosswintle.uk\/2021\/03\/css-only-spam-prevention-allow-list-captcha\/\",\"url\":\"https:\/\/rosswintle.uk\/2021\/03\/css-only-spam-prevention-allow-list-captcha\/\",\"name\":\"Idea: CSS-only spam prevention with a simple allow-list and CAPTCHA - Ross Wintle\",\"isPartOf\":{\"@id\":\"https:\/\/rosswintle.uk\/#website\"},\"datePublished\":\"2021-03-26T10:49:01+00:00\",\"dateModified\":\"2021-05-14T09:21:13+00:00\",\"author\":{\"@id\":\"https:\/\/rosswintle.uk\/#\/schema\/person\/9f9bec147b2bfd762f09a2c2da7177dc\"},\"breadcrumb\":{\"@id\":\"https:\/\/rosswintle.uk\/2021\/03\/css-only-spam-prevention-allow-list-captcha\/#breadcrumb\"},\"inLanguage\":\"en-GB\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/rosswintle.uk\/2021\/03\/css-only-spam-prevention-allow-list-captcha\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/rosswintle.uk\/2021\/03\/css-only-spam-prevention-allow-list-captcha\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/rosswintle.uk\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Idea: CSS-only spam prevention with a simple allow-list and CAPTCHA\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/rosswintle.uk\/#website\",\"url\":\"https:\/\/rosswintle.uk\/\",\"name\":\"Ross Wintle\",\"description\":\"Creativity, curiosity, and code\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/rosswintle.uk\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-GB\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/rosswintle.uk\/#\/schema\/person\/9f9bec147b2bfd762f09a2c2da7177dc\",\"name\":\"Ross Wintle\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-GB\",\"@id\":\"https:\/\/rosswintle.uk\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/28519fc7c37998eea059b525da5fc7ce?s=96&d=identicon&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/28519fc7c37998eea059b525da5fc7ce?s=96&d=identicon&r=g\",\"caption\":\"Ross Wintle\"},\"url\":\"https:\/\/rosswintle.uk\/author\/rosswintle\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->",
    "yoast_head_json": {
        "title": "Idea: CSS-only spam prevention with a simple allow-list and CAPTCHA - Ross Wintle",
        "robots": {
            "index": "index",
            "follow": "follow",
            "max-snippet": "max-snippet:-1",
            "max-image-preview": "max-image-preview:large",
            "max-video-preview": "max-video-preview:-1"
        },
        "canonical": "https:\/\/rosswintle.uk\/2021\/03\/css-only-spam-prevention-allow-list-captcha\/",
        "og_locale": "en_GB",
        "og_type": "article",
        "og_title": "Idea: CSS-only spam prevention with a simple allow-list and CAPTCHA - Ross Wintle",
        "og_description": "An idea for a CSS-only spam prevention system that uses a white list and simple CAPTCHA, complete with WordPress plugin code.",
        "og_url": "https:\/\/rosswintle.uk\/2021\/03\/css-only-spam-prevention-allow-list-captcha\/",
        "og_site_name": "Ross Wintle",
        "article_published_time": "2021-03-26T10:49:01+00:00",
        "article_modified_time": "2021-05-14T09:21:13+00:00",
        "og_image": [
            {
                "width": "600",
                "height": "399",
                "url": "https:\/\/rosswintle.uk\/wp-content\/uploads\/2012\/06\/DSC_0005-small.jpg",
                "type": "image\/jpeg"
            }
        ],
        "author": "Ross Wintle",
        "twitter_card": "summary_large_image",
        "twitter_creator": "@magicroundabout",
        "twitter_site": "@magicroundabout",
        "twitter_misc": {
            "Written by": "Ross Wintle",
            "Estimated reading time": "6 minutes"
        },
        "schema": {
            "@context": "https:\/\/schema.org",
            "@graph": [
                {
                    "@type": "WebPage",
                    "@id": "https:\/\/rosswintle.uk\/2021\/03\/css-only-spam-prevention-allow-list-captcha\/",
                    "url": "https:\/\/rosswintle.uk\/2021\/03\/css-only-spam-prevention-allow-list-captcha\/",
                    "name": "Idea: CSS-only spam prevention with a simple allow-list and CAPTCHA - Ross Wintle",
                    "isPartOf": {
                        "@id": "https:\/\/rosswintle.uk\/#website"
                    },
                    "datePublished": "2021-03-26T10:49:01+00:00",
                    "dateModified": "2021-05-14T09:21:13+00:00",
                    "author": {
                        "@id": "https:\/\/rosswintle.uk\/#\/schema\/person\/9f9bec147b2bfd762f09a2c2da7177dc"
                    },
                    "breadcrumb": {
                        "@id": "https:\/\/rosswintle.uk\/2021\/03\/css-only-spam-prevention-allow-list-captcha\/#breadcrumb"
                    },
                    "inLanguage": "en-GB",
                    "potentialAction": [
                        {
                            "@type": "ReadAction",
                            "target": [
                                "https:\/\/rosswintle.uk\/2021\/03\/css-only-spam-prevention-allow-list-captcha\/"
                            ]
                        }
                    ]
                },
                {
                    "@type": "BreadcrumbList",
                    "@id": "https:\/\/rosswintle.uk\/2021\/03\/css-only-spam-prevention-allow-list-captcha\/#breadcrumb",
                    "itemListElement": [
                        {
                            "@type": "ListItem",
                            "position": 1,
                            "name": "Home",
                            "item": "https:\/\/rosswintle.uk\/"
                        },
                        {
                            "@type": "ListItem",
                            "position": 2,
                            "name": "Idea: CSS-only spam prevention with a simple allow-list and CAPTCHA"
                        }
                    ]
                },
                {
                    "@type": "WebSite",
                    "@id": "https:\/\/rosswintle.uk\/#website",
                    "url": "https:\/\/rosswintle.uk\/",
                    "name": "Ross Wintle",
                    "description": "Creativity, curiosity, and code",
                    "potentialAction": [
                        {
                            "@type": "SearchAction",
                            "target": {
                                "@type": "EntryPoint",
                                "urlTemplate": "https:\/\/rosswintle.uk\/?s={search_term_string}"
                            },
                            "query-input": "required name=search_term_string"
                        }
                    ],
                    "inLanguage": "en-GB"
                },
                {
                    "@type": "Person",
                    "@id": "https:\/\/rosswintle.uk\/#\/schema\/person\/9f9bec147b2bfd762f09a2c2da7177dc",
                    "name": "Ross Wintle",
                    "image": {
                        "@type": "ImageObject",
                        "inLanguage": "en-GB",
                        "@id": "https:\/\/rosswintle.uk\/#\/schema\/person\/image\/",
                        "url": "https:\/\/secure.gravatar.com\/avatar\/28519fc7c37998eea059b525da5fc7ce?s=96&d=identicon&r=g",
                        "contentUrl": "https:\/\/secure.gravatar.com\/avatar\/28519fc7c37998eea059b525da5fc7ce?s=96&d=identicon&r=g",
                        "caption": "Ross Wintle"
                    },
                    "url": "https:\/\/rosswintle.uk\/author\/rosswintle\/"
                }
            ]
        }
    },
    "_links": {
        "self": [
            {
                "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/posts\/10050"
            }
        ],
        "collection": [
            {
                "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/posts"
            }
        ],
        "about": [
            {
                "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/types\/post"
            }
        ],
        "author": [
            {
                "embeddable": true,
                "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/users\/2"
            }
        ],
        "replies": [
            {
                "embeddable": true,
                "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/comments?post=10050"
            }
        ],
        "version-history": [
            {
                "count": 7,
                "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/posts\/10050\/revisions"
            }
        ],
        "predecessor-version": [
            {
                "id": 10063,
                "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/posts\/10050\/revisions\/10063"
            }
        ],
        "wp:attachment": [
            {
                "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/media?parent=10050"
            }
        ],
        "wp:term": [
            {
                "taxonomy": "category",
                "embeddable": true,
                "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/categories?post=10050"
            },
            {
                "taxonomy": "post_tag",
                "embeddable": true,
                "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/tags?post=10050"
            }
        ],
        "curies": [
            {
                "name": "wp",
                "href": "https:\/\/api.w.org\/{rel}",
                "templated": true
            }
        ]
    }
}