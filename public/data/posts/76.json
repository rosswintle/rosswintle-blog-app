[
    {
        "dataAsArray": {
            "id": 255113,
            "date": "2024-03-24T21:53:33",
            "date_gmt": "2024-03-24T21:53:33",
            "guid": {
                "rendered": "https:\/\/rosswintle.uk\/?p=255113"
            },
            "modified": "2024-03-24T21:53:35",
            "modified_gmt": "2024-03-24T21:53:35",
            "slug": "trusting-code",
            "status": "publish",
            "type": "post",
            "link": "https:\/\/rosswintle.uk\/2024\/03\/trusting-code\/",
            "title": {
                "rendered": "Trusting code"
            },
            "content": {
                "rendered": "\n<h2 class=\"wp-block-heading\">The school run<\/h2>\n\n\n\n<p>When we start a new school year, my wife and I have new routines for getting our kids to and from school. And those early weeks are filled with text messages going back and forth like &#8220;You&#8217;re collecting kid 1 today at 3pm, right?&#8221;, or &#8220;You know kid 2 has after-school club today, right?&#8221;<\/p>\n\n\n\n<p>It takes time for the trust to build that the other person is checking the calendar, has set the right reminders, and knows the routine.<\/p>\n\n\n\n<p>After a few weeks, these messages stop (until there is an exception to the routine!).<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">You have a relationship with your code!<\/h2>\n\n\n\n<p>You kinda have a relationship with code from your projects. You probably have feelings about it. It can delight you, and it can frustrate you. Like with a friendship or romantic relationship, you&#8217;ll get the most out of it if you invest in it, tend it, nurture it. If you neglect it it will slap you in the face the next time you demand something of it.<\/p>\n\n\n\n<p>Trust is also something you can have &#8211; or not have &#8211; in a code base.<\/p>\n\n\n\n<p>As I&#8217;ve been <a href=\"https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-intro\/\">thinking about code style<\/a>, I&#8217;ve also been thinking about how it&#8217;s important to build up trust in a code base.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">You keep using that word. I do not think it means what you think it means.<\/h2>\n\n\n\n<p>Sometimes I have a project that I&#8217;ve been looking at where I don&#8217;t trust it.<\/p>\n\n\n\n<p>I maybe don&#8217;t trust it because I know it&#8217;s poorly typed, or not typed at all, and so I know edge cases can creep in.<\/p>\n\n\n\n<p>I maybe don&#8217;t trust it because it has no tests.<\/p>\n\n\n\n<p>Perhaps it&#8217;s so complex and poorly documented that I&#8217;m not convinced the author know what the code did, let alone this newcomer to it.<\/p>\n\n\n\n<p>Or maybe it just seems muddled and badly structured.<\/p>\n\n\n\n<p>In any case, I might be reading some code like this and come across a function call like:<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: php; auto-links: false; gutter: false; title: ; quick-code: false; notranslate\" title=\"\">\nvalidateEmailParameter();\n<\/pre><\/div>\n\n\n<p>And a function definition like:<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: php; auto-links: false; gutter: false; title: ; quick-code: false; notranslate\" title=\"\">\n\/\/ Validate the email address.\nfunction validateEmailParameter()\n{\n   ...\n}\n<\/pre><\/div>\n\n\n<p>Without further information or context, I might have a lot of questions about what this does.<\/p>\n\n\n\n<ul>\n<li>Where is the parameter that&#8217;s being validated? This <em>might<\/em> be evident from the context, such as inside an HTTP request handler. But it might not.<\/li>\n\n\n\n<li>What is a valid email in this case? Have they implemented this robustly?<\/li>\n\n\n\n<li>Does it only accept a string? Does it handle other types or null? Does it handle an empty string?<\/li>\n\n\n\n<li>What might this return? Does it return? Could it return an error code or exception?<\/li>\n<\/ul>\n\n\n\n<p>In an untrustworthy codebase, I won&#8217;t make assumptions about a function like this. I will have to open it up, read through the code, and figure out what it does. This takes time, and for more complex situations this can <em>really<\/em> slow me down.<\/p>\n\n\n\n<p>BUT, if I trust the codebase, then the function definition will probably be something like this:<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n\/**\n * Tests if the &quot;email&quot; parameter passed in the URL query string is present and is a\n * valid address. If it's not then a 400 HTTP status code will be returned and the\n * application will exit.\n *\n * If the address is present and valid, true is returned.\n * \n * @return boolean\n *\/\nfunction validateEmailParameter()\n{\n    ...\n}\n<\/pre><\/div>\n\n\n<p>This is a contrived, awkward and simple case. But in a case like this I&#8217;m much more likely to believe the function&#8217;s description and not even read the code to see what it does.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Earning my trust<\/h2>\n\n\n\n<p>However, this trust isn&#8217;t a one-off thing. My trust in a code base is earned over time through repeated exposure to good practice, good documentation, attention to detail, and other factors.<\/p>\n\n\n\n<p>But once it has my trust, it&#8217;s so much easier to work with without having to go <a href=\"https:\/\/queue.acm.org\/detail.cfm?id=945136\">spelunking<\/a>. I can work with it faster because the mental overhead of reading it is so much lower.<\/p>\n\n\n\n<p>This post sits as a sidebar to my series on readable code. They go hand in hand.<\/p>\n\n\n\n<p>The readable code tips work best when a code base is trusted. But they are also one of the ways in which you can build trust in your code.<\/p>\n\n\n\n<p>So think about your work. Do you trust the code in your projects? If not why not? And what can you do to make your code more trustworthy?<\/p>\n\n\n\n<p><\/p>\n\n\n\n<p><\/p>\n",
                "protected": false
            },
            "excerpt": {
                "rendered": "<p>You kinda have a relationship with code from your projects. You probably have feelings about it. As I&#8217;ve been thinking about code style, I&#8217;ve also been thinking about how it&#8217;s important to build up trust in a code base.<\/p>\n",
                "protected": false
            },
            "author": 2,
            "featured_media": 0,
            "comment_status": "closed",
            "ping_status": "closed",
            "sticky": false,
            "template": "",
            "format": "standard",
            "meta": {
                "sig_custom_text": "",
                "sig_image_type": "featured-image",
                "sig_custom_image": 0,
                "sig_is_disabled": false,
                "url": "",
                "footnotes": ""
            },
            "categories": [
                23,
                24
            ],
            "tags": [
                36,
                387,
                286,
                16234,
                131,
                16233,
                16235,
                582
            ],
            "yoast_head": "<!-- This site is optimized with the Yoast SEO plugin v22.5 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Trusting code - Ross Wintle<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/rosswintle.uk\/2024\/03\/trusting-code\/\" \/>\n<meta property=\"og:locale\" content=\"en_GB\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Trusting code - Ross Wintle\" \/>\n<meta property=\"og:description\" content=\"You kinda have a relationship with code from your projects. You probably have feelings about it. As I&#039;ve been thinking about code style, I&#039;ve also been thinking about how it&#039;s important to build up trust in a code base.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/rosswintle.uk\/2024\/03\/trusting-code\/\" \/>\n<meta property=\"og:site_name\" content=\"Ross Wintle\" \/>\n<meta property=\"article:published_time\" content=\"2024-03-24T21:53:33+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2024-03-24T21:53:35+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/rosswintle.uk\/wp-content\/uploads\/2012\/06\/DSC_0005-small.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"600\" \/>\n\t<meta property=\"og:image:height\" content=\"399\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/jpeg\" \/>\n<meta name=\"author\" content=\"Ross Wintle\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@magicroundabout\" \/>\n<meta name=\"twitter:site\" content=\"@magicroundabout\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Ross Wintle\" \/>\n\t<meta name=\"twitter:label2\" content=\"Estimated reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"4 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/rosswintle.uk\/2024\/03\/trusting-code\/\",\"url\":\"https:\/\/rosswintle.uk\/2024\/03\/trusting-code\/\",\"name\":\"Trusting code - Ross Wintle\",\"isPartOf\":{\"@id\":\"https:\/\/rosswintle.uk\/#website\"},\"datePublished\":\"2024-03-24T21:53:33+00:00\",\"dateModified\":\"2024-03-24T21:53:35+00:00\",\"author\":{\"@id\":\"https:\/\/rosswintle.uk\/#\/schema\/person\/9f9bec147b2bfd762f09a2c2da7177dc\"},\"breadcrumb\":{\"@id\":\"https:\/\/rosswintle.uk\/2024\/03\/trusting-code\/#breadcrumb\"},\"inLanguage\":\"en-GB\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/rosswintle.uk\/2024\/03\/trusting-code\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/rosswintle.uk\/2024\/03\/trusting-code\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/rosswintle.uk\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Trusting code\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/rosswintle.uk\/#website\",\"url\":\"https:\/\/rosswintle.uk\/\",\"name\":\"Ross Wintle\",\"description\":\"Creativity, curiosity, and code\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/rosswintle.uk\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-GB\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/rosswintle.uk\/#\/schema\/person\/9f9bec147b2bfd762f09a2c2da7177dc\",\"name\":\"Ross Wintle\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-GB\",\"@id\":\"https:\/\/rosswintle.uk\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/28519fc7c37998eea059b525da5fc7ce?s=96&d=identicon&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/28519fc7c37998eea059b525da5fc7ce?s=96&d=identicon&r=g\",\"caption\":\"Ross Wintle\"},\"url\":\"https:\/\/rosswintle.uk\/author\/rosswintle\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->",
            "yoast_head_json": {
                "title": "Trusting code - Ross Wintle",
                "robots": {
                    "index": "index",
                    "follow": "follow",
                    "max-snippet": "max-snippet:-1",
                    "max-image-preview": "max-image-preview:large",
                    "max-video-preview": "max-video-preview:-1"
                },
                "canonical": "https:\/\/rosswintle.uk\/2024\/03\/trusting-code\/",
                "og_locale": "en_GB",
                "og_type": "article",
                "og_title": "Trusting code - Ross Wintle",
                "og_description": "You kinda have a relationship with code from your projects. You probably have feelings about it. As I've been thinking about code style, I've also been thinking about how it's important to build up trust in a code base.",
                "og_url": "https:\/\/rosswintle.uk\/2024\/03\/trusting-code\/",
                "og_site_name": "Ross Wintle",
                "article_published_time": "2024-03-24T21:53:33+00:00",
                "article_modified_time": "2024-03-24T21:53:35+00:00",
                "og_image": [
                    {
                        "width": "600",
                        "height": "399",
                        "url": "https:\/\/rosswintle.uk\/wp-content\/uploads\/2012\/06\/DSC_0005-small.jpg",
                        "type": "image\/jpeg"
                    }
                ],
                "author": "Ross Wintle",
                "twitter_card": "summary_large_image",
                "twitter_creator": "@magicroundabout",
                "twitter_site": "@magicroundabout",
                "twitter_misc": {
                    "Written by": "Ross Wintle",
                    "Estimated reading time": "4 minutes"
                },
                "schema": {
                    "@context": "https:\/\/schema.org",
                    "@graph": [
                        {
                            "@type": "WebPage",
                            "@id": "https:\/\/rosswintle.uk\/2024\/03\/trusting-code\/",
                            "url": "https:\/\/rosswintle.uk\/2024\/03\/trusting-code\/",
                            "name": "Trusting code - Ross Wintle",
                            "isPartOf": {
                                "@id": "https:\/\/rosswintle.uk\/#website"
                            },
                            "datePublished": "2024-03-24T21:53:33+00:00",
                            "dateModified": "2024-03-24T21:53:35+00:00",
                            "author": {
                                "@id": "https:\/\/rosswintle.uk\/#\/schema\/person\/9f9bec147b2bfd762f09a2c2da7177dc"
                            },
                            "breadcrumb": {
                                "@id": "https:\/\/rosswintle.uk\/2024\/03\/trusting-code\/#breadcrumb"
                            },
                            "inLanguage": "en-GB",
                            "potentialAction": [
                                {
                                    "@type": "ReadAction",
                                    "target": [
                                        "https:\/\/rosswintle.uk\/2024\/03\/trusting-code\/"
                                    ]
                                }
                            ]
                        },
                        {
                            "@type": "BreadcrumbList",
                            "@id": "https:\/\/rosswintle.uk\/2024\/03\/trusting-code\/#breadcrumb",
                            "itemListElement": [
                                {
                                    "@type": "ListItem",
                                    "position": 1,
                                    "name": "Home",
                                    "item": "https:\/\/rosswintle.uk\/"
                                },
                                {
                                    "@type": "ListItem",
                                    "position": 2,
                                    "name": "Trusting code"
                                }
                            ]
                        },
                        {
                            "@type": "WebSite",
                            "@id": "https:\/\/rosswintle.uk\/#website",
                            "url": "https:\/\/rosswintle.uk\/",
                            "name": "Ross Wintle",
                            "description": "Creativity, curiosity, and code",
                            "potentialAction": [
                                {
                                    "@type": "SearchAction",
                                    "target": {
                                        "@type": "EntryPoint",
                                        "urlTemplate": "https:\/\/rosswintle.uk\/?s={search_term_string}"
                                    },
                                    "query-input": "required name=search_term_string"
                                }
                            ],
                            "inLanguage": "en-GB"
                        },
                        {
                            "@type": "Person",
                            "@id": "https:\/\/rosswintle.uk\/#\/schema\/person\/9f9bec147b2bfd762f09a2c2da7177dc",
                            "name": "Ross Wintle",
                            "image": {
                                "@type": "ImageObject",
                                "inLanguage": "en-GB",
                                "@id": "https:\/\/rosswintle.uk\/#\/schema\/person\/image\/",
                                "url": "https:\/\/secure.gravatar.com\/avatar\/28519fc7c37998eea059b525da5fc7ce?s=96&d=identicon&r=g",
                                "contentUrl": "https:\/\/secure.gravatar.com\/avatar\/28519fc7c37998eea059b525da5fc7ce?s=96&d=identicon&r=g",
                                "caption": "Ross Wintle"
                            },
                            "url": "https:\/\/rosswintle.uk\/author\/rosswintle\/"
                        }
                    ]
                }
            },
            "_links": {
                "self": [
                    {
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/posts\/255113"
                    }
                ],
                "collection": [
                    {
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/posts"
                    }
                ],
                "about": [
                    {
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/types\/post"
                    }
                ],
                "author": [
                    {
                        "embeddable": true,
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/users\/2"
                    }
                ],
                "replies": [
                    {
                        "embeddable": true,
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/comments?post=255113"
                    }
                ],
                "version-history": [
                    {
                        "count": 1,
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/posts\/255113\/revisions"
                    }
                ],
                "predecessor-version": [
                    {
                        "id": 255114,
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/posts\/255113\/revisions\/255114"
                    }
                ],
                "wp:attachment": [
                    {
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/media?parent=255113"
                    }
                ],
                "wp:term": [
                    {
                        "taxonomy": "category",
                        "embeddable": true,
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/categories?post=255113"
                    },
                    {
                        "taxonomy": "post_tag",
                        "embeddable": true,
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/tags?post=255113"
                    }
                ],
                "curies": [
                    {
                        "name": "wp",
                        "href": "https:\/\/api.w.org\/{rel}",
                        "templated": true
                    }
                ]
            }
        },
        "id": 255113,
        "dateGmt": "2024-03-24T21:53:33",
        "modifiedDateGmt": "2024-03-24T21:53:35",
        "slug": "trusting-code",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/rosswintle.uk\/2024\/03\/trusting-code\/",
        "title": "Trusting code",
        "content": "\n<h2 class=\"wp-block-heading\">The school run<\/h2>\n\n\n\n<p>When we start a new school year, my wife and I have new routines for getting our kids to and from school. And those early weeks are filled with text messages going back and forth like &#8220;You&#8217;re collecting kid 1 today at 3pm, right?&#8221;, or &#8220;You know kid 2 has after-school club today, right?&#8221;<\/p>\n\n\n\n<p>It takes time for the trust to build that the other person is checking the calendar, has set the right reminders, and knows the routine.<\/p>\n\n\n\n<p>After a few weeks, these messages stop (until there is an exception to the routine!).<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">You have a relationship with your code!<\/h2>\n\n\n\n<p>You kinda have a relationship with code from your projects. You probably have feelings about it. It can delight you, and it can frustrate you. Like with a friendship or romantic relationship, you&#8217;ll get the most out of it if you invest in it, tend it, nurture it. If you neglect it it will slap you in the face the next time you demand something of it.<\/p>\n\n\n\n<p>Trust is also something you can have &#8211; or not have &#8211; in a code base.<\/p>\n\n\n\n<p>As I&#8217;ve been <a href=\"https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-intro\/\">thinking about code style<\/a>, I&#8217;ve also been thinking about how it&#8217;s important to build up trust in a code base.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">You keep using that word. I do not think it means what you think it means.<\/h2>\n\n\n\n<p>Sometimes I have a project that I&#8217;ve been looking at where I don&#8217;t trust it.<\/p>\n\n\n\n<p>I maybe don&#8217;t trust it because I know it&#8217;s poorly typed, or not typed at all, and so I know edge cases can creep in.<\/p>\n\n\n\n<p>I maybe don&#8217;t trust it because it has no tests.<\/p>\n\n\n\n<p>Perhaps it&#8217;s so complex and poorly documented that I&#8217;m not convinced the author know what the code did, let alone this newcomer to it.<\/p>\n\n\n\n<p>Or maybe it just seems muddled and badly structured.<\/p>\n\n\n\n<p>In any case, I might be reading some code like this and come across a function call like:<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: php; auto-links: false; gutter: false; title: ; quick-code: false; notranslate\" title=\"\">\nvalidateEmailParameter();\n<\/pre><\/div>\n\n\n<p>And a function definition like:<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: php; auto-links: false; gutter: false; title: ; quick-code: false; notranslate\" title=\"\">\n\/\/ Validate the email address.\nfunction validateEmailParameter()\n{\n   ...\n}\n<\/pre><\/div>\n\n\n<p>Without further information or context, I might have a lot of questions about what this does.<\/p>\n\n\n\n<ul>\n<li>Where is the parameter that&#8217;s being validated? This <em>might<\/em> be evident from the context, such as inside an HTTP request handler. But it might not.<\/li>\n\n\n\n<li>What is a valid email in this case? Have they implemented this robustly?<\/li>\n\n\n\n<li>Does it only accept a string? Does it handle other types or null? Does it handle an empty string?<\/li>\n\n\n\n<li>What might this return? Does it return? Could it return an error code or exception?<\/li>\n<\/ul>\n\n\n\n<p>In an untrustworthy codebase, I won&#8217;t make assumptions about a function like this. I will have to open it up, read through the code, and figure out what it does. This takes time, and for more complex situations this can <em>really<\/em> slow me down.<\/p>\n\n\n\n<p>BUT, if I trust the codebase, then the function definition will probably be something like this:<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: plain; title: ; notranslate\" title=\"\">\n\/**\n * Tests if the &quot;email&quot; parameter passed in the URL query string is present and is a\n * valid address. If it's not then a 400 HTTP status code will be returned and the\n * application will exit.\n *\n * If the address is present and valid, true is returned.\n * \n * @return boolean\n *\/\nfunction validateEmailParameter()\n{\n    ...\n}\n<\/pre><\/div>\n\n\n<p>This is a contrived, awkward and simple case. But in a case like this I&#8217;m much more likely to believe the function&#8217;s description and not even read the code to see what it does.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Earning my trust<\/h2>\n\n\n\n<p>However, this trust isn&#8217;t a one-off thing. My trust in a code base is earned over time through repeated exposure to good practice, good documentation, attention to detail, and other factors.<\/p>\n\n\n\n<p>But once it has my trust, it&#8217;s so much easier to work with without having to go <a href=\"https:\/\/queue.acm.org\/detail.cfm?id=945136\">spelunking<\/a>. I can work with it faster because the mental overhead of reading it is so much lower.<\/p>\n\n\n\n<p>This post sits as a sidebar to my series on readable code. They go hand in hand.<\/p>\n\n\n\n<p>The readable code tips work best when a code base is trusted. But they are also one of the ways in which you can build trust in your code.<\/p>\n\n\n\n<p>So think about your work. Do you trust the code in your projects? If not why not? And what can you do to make your code more trustworthy?<\/p>\n\n\n\n<p><\/p>\n\n\n\n<p><\/p>\n",
        "excerpt": "<p>You kinda have a relationship with code from your projects. You probably have feelings about it. As I&#8217;ve been thinking about code style, I&#8217;ve also been thinking about how it&#8217;s important to build up trust in a code base.<\/p>\n",
        "parentId": 0,
        "authorId": 2,
        "featuredMediaId": 0
    },
    {
        "dataAsArray": {
            "id": 255112,
            "date": "2024-03-24T22:38:31",
            "date_gmt": "2024-03-24T22:38:31",
            "guid": {
                "rendered": "https:\/\/rosswintle.uk\/?p=255112"
            },
            "modified": "2024-03-30T23:27:44",
            "modified_gmt": "2024-03-30T23:27:44",
            "slug": "readable-code-tips-extract-complex-conditions",
            "status": "publish",
            "type": "post",
            "link": "https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-extract-complex-conditions\/",
            "title": {
                "rendered": "Readable code tips: Extract complex conditions"
            },
            "content": {
                "rendered": "\n<p><em>Previous tip: <a href=\"https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-intro\/\">Introduction and naming with units<\/a><\/em><br><em>Next tip: <a href=\"https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/\">Don&#8217;t inline everything<\/a><\/em><\/p>\n\n\n\n<p>One idea that I learned <em>very<\/em> early on in my computing education was that you work &#8220;top down&#8221; by writing a high-level, abstract version of a more complex process, stating what you want to do, and then working on each of the sub-steps of the process.<\/p>\n\n\n\n<p>I&#8217;ve heard this called &#8220;pseudo-code&#8221; and &#8220;programming by wishful thinking&#8221; (as in &#8220;I wish there was a function called <code>getPostsFromApi()<\/code>&#8220;)<\/p>\n\n\n\n<p>I often come across complex conditions in code that are hard to read because they have multiple sub-conditions.<\/p>\n\n\n\n<p>Things like:<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: php; auto-links: false; gutter: false; title: ; quick-code: false; notranslate\" title=\"\">\nif (\n    pathinfo($filename, PATHINFO_EXTENSION) === 'txt' &amp;&amp;\n    file_exists($filename) &amp;&amp;\n    filetype($filename) === 'file'\n) {\n    ...\n}\n<\/pre><\/div>\n\n\n<p>I&#8217;m sure that these kinds of conditions normally evolve over time and so don&#8217;t exist as pseudo-code to start with. But the pseudo-code idea can now be used to make this easier to read:<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: php; auto-links: false; gutter: false; title: ; quick-code: false; notranslate\" title=\"\">\nfunction isExistingTextFile($filename) {\n\treturn\n        pathinfo($filename, PATHINFO_EXTENSION) === 'txt' &amp;&amp;\n        file_exists($filename) &amp;&amp;\n        filetype($filename) === 'file';\n}\n\nif (isExistingTextFile($filename)) {\n    ...\n}\n<\/pre><\/div>\n\n\n<p>This has the additional benefit that the <code>isExistingTextFile<\/code> function here is also reusable.<\/p>\n\n\n\n<p>And if you can <a href=\"https:\/\/rosswintle.uk\/2024\/03\/trusting-code\/\">build trust in your code base<\/a>, this is easier to read and faster to work with too.<\/p>\n",
                "protected": false
            },
            "excerpt": {
                "rendered": "<p>Refactoring complex conditions to make them more readable and easier to work with.<\/p>\n",
                "protected": false
            },
            "author": 2,
            "featured_media": 0,
            "comment_status": "closed",
            "ping_status": "closed",
            "sticky": false,
            "template": "",
            "format": "standard",
            "meta": {
                "sig_custom_text": "",
                "sig_image_type": "featured-image",
                "sig_custom_image": 0,
                "sig_is_disabled": false,
                "url": "",
                "footnotes": ""
            },
            "categories": [
                23
            ],
            "tags": [
                286
            ],
            "yoast_head": "<!-- This site is optimized with the Yoast SEO plugin v22.5 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Readable code tips: Extract complex conditions - Ross Wintle<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-extract-complex-conditions\/\" \/>\n<meta property=\"og:locale\" content=\"en_GB\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Readable code tips: Extract complex conditions - Ross Wintle\" \/>\n<meta property=\"og:description\" content=\"Refactoring complex conditions to make them more readable and easier to work with.\" \/>\n<meta property=\"og:url\" content=\"https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-extract-complex-conditions\/\" \/>\n<meta property=\"og:site_name\" content=\"Ross Wintle\" \/>\n<meta property=\"article:published_time\" content=\"2024-03-24T22:38:31+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2024-03-30T23:27:44+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/rosswintle.uk\/wp-content\/uploads\/2012\/06\/DSC_0005-small.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"600\" \/>\n\t<meta property=\"og:image:height\" content=\"399\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/jpeg\" \/>\n<meta name=\"author\" content=\"Ross Wintle\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@magicroundabout\" \/>\n<meta name=\"twitter:site\" content=\"@magicroundabout\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Ross Wintle\" \/>\n\t<meta name=\"twitter:label2\" content=\"Estimated reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"1 minute\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-extract-complex-conditions\/\",\"url\":\"https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-extract-complex-conditions\/\",\"name\":\"Readable code tips: Extract complex conditions - Ross Wintle\",\"isPartOf\":{\"@id\":\"https:\/\/rosswintle.uk\/#website\"},\"datePublished\":\"2024-03-24T22:38:31+00:00\",\"dateModified\":\"2024-03-30T23:27:44+00:00\",\"author\":{\"@id\":\"https:\/\/rosswintle.uk\/#\/schema\/person\/9f9bec147b2bfd762f09a2c2da7177dc\"},\"breadcrumb\":{\"@id\":\"https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-extract-complex-conditions\/#breadcrumb\"},\"inLanguage\":\"en-GB\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-extract-complex-conditions\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-extract-complex-conditions\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/rosswintle.uk\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Readable code tips: Extract complex conditions\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/rosswintle.uk\/#website\",\"url\":\"https:\/\/rosswintle.uk\/\",\"name\":\"Ross Wintle\",\"description\":\"Creativity, curiosity, and code\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/rosswintle.uk\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-GB\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/rosswintle.uk\/#\/schema\/person\/9f9bec147b2bfd762f09a2c2da7177dc\",\"name\":\"Ross Wintle\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-GB\",\"@id\":\"https:\/\/rosswintle.uk\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/28519fc7c37998eea059b525da5fc7ce?s=96&d=identicon&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/28519fc7c37998eea059b525da5fc7ce?s=96&d=identicon&r=g\",\"caption\":\"Ross Wintle\"},\"url\":\"https:\/\/rosswintle.uk\/author\/rosswintle\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->",
            "yoast_head_json": {
                "title": "Readable code tips: Extract complex conditions - Ross Wintle",
                "robots": {
                    "index": "index",
                    "follow": "follow",
                    "max-snippet": "max-snippet:-1",
                    "max-image-preview": "max-image-preview:large",
                    "max-video-preview": "max-video-preview:-1"
                },
                "canonical": "https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-extract-complex-conditions\/",
                "og_locale": "en_GB",
                "og_type": "article",
                "og_title": "Readable code tips: Extract complex conditions - Ross Wintle",
                "og_description": "Refactoring complex conditions to make them more readable and easier to work with.",
                "og_url": "https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-extract-complex-conditions\/",
                "og_site_name": "Ross Wintle",
                "article_published_time": "2024-03-24T22:38:31+00:00",
                "article_modified_time": "2024-03-30T23:27:44+00:00",
                "og_image": [
                    {
                        "width": "600",
                        "height": "399",
                        "url": "https:\/\/rosswintle.uk\/wp-content\/uploads\/2012\/06\/DSC_0005-small.jpg",
                        "type": "image\/jpeg"
                    }
                ],
                "author": "Ross Wintle",
                "twitter_card": "summary_large_image",
                "twitter_creator": "@magicroundabout",
                "twitter_site": "@magicroundabout",
                "twitter_misc": {
                    "Written by": "Ross Wintle",
                    "Estimated reading time": "1 minute"
                },
                "schema": {
                    "@context": "https:\/\/schema.org",
                    "@graph": [
                        {
                            "@type": "WebPage",
                            "@id": "https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-extract-complex-conditions\/",
                            "url": "https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-extract-complex-conditions\/",
                            "name": "Readable code tips: Extract complex conditions - Ross Wintle",
                            "isPartOf": {
                                "@id": "https:\/\/rosswintle.uk\/#website"
                            },
                            "datePublished": "2024-03-24T22:38:31+00:00",
                            "dateModified": "2024-03-30T23:27:44+00:00",
                            "author": {
                                "@id": "https:\/\/rosswintle.uk\/#\/schema\/person\/9f9bec147b2bfd762f09a2c2da7177dc"
                            },
                            "breadcrumb": {
                                "@id": "https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-extract-complex-conditions\/#breadcrumb"
                            },
                            "inLanguage": "en-GB",
                            "potentialAction": [
                                {
                                    "@type": "ReadAction",
                                    "target": [
                                        "https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-extract-complex-conditions\/"
                                    ]
                                }
                            ]
                        },
                        {
                            "@type": "BreadcrumbList",
                            "@id": "https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-extract-complex-conditions\/#breadcrumb",
                            "itemListElement": [
                                {
                                    "@type": "ListItem",
                                    "position": 1,
                                    "name": "Home",
                                    "item": "https:\/\/rosswintle.uk\/"
                                },
                                {
                                    "@type": "ListItem",
                                    "position": 2,
                                    "name": "Readable code tips: Extract complex conditions"
                                }
                            ]
                        },
                        {
                            "@type": "WebSite",
                            "@id": "https:\/\/rosswintle.uk\/#website",
                            "url": "https:\/\/rosswintle.uk\/",
                            "name": "Ross Wintle",
                            "description": "Creativity, curiosity, and code",
                            "potentialAction": [
                                {
                                    "@type": "SearchAction",
                                    "target": {
                                        "@type": "EntryPoint",
                                        "urlTemplate": "https:\/\/rosswintle.uk\/?s={search_term_string}"
                                    },
                                    "query-input": "required name=search_term_string"
                                }
                            ],
                            "inLanguage": "en-GB"
                        },
                        {
                            "@type": "Person",
                            "@id": "https:\/\/rosswintle.uk\/#\/schema\/person\/9f9bec147b2bfd762f09a2c2da7177dc",
                            "name": "Ross Wintle",
                            "image": {
                                "@type": "ImageObject",
                                "inLanguage": "en-GB",
                                "@id": "https:\/\/rosswintle.uk\/#\/schema\/person\/image\/",
                                "url": "https:\/\/secure.gravatar.com\/avatar\/28519fc7c37998eea059b525da5fc7ce?s=96&d=identicon&r=g",
                                "contentUrl": "https:\/\/secure.gravatar.com\/avatar\/28519fc7c37998eea059b525da5fc7ce?s=96&d=identicon&r=g",
                                "caption": "Ross Wintle"
                            },
                            "url": "https:\/\/rosswintle.uk\/author\/rosswintle\/"
                        }
                    ]
                }
            },
            "_links": {
                "self": [
                    {
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/posts\/255112"
                    }
                ],
                "collection": [
                    {
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/posts"
                    }
                ],
                "about": [
                    {
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/types\/post"
                    }
                ],
                "author": [
                    {
                        "embeddable": true,
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/users\/2"
                    }
                ],
                "replies": [
                    {
                        "embeddable": true,
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/comments?post=255112"
                    }
                ],
                "version-history": [
                    {
                        "count": 3,
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/posts\/255112\/revisions"
                    }
                ],
                "predecessor-version": [
                    {
                        "id": 255135,
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/posts\/255112\/revisions\/255135"
                    }
                ],
                "wp:attachment": [
                    {
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/media?parent=255112"
                    }
                ],
                "wp:term": [
                    {
                        "taxonomy": "category",
                        "embeddable": true,
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/categories?post=255112"
                    },
                    {
                        "taxonomy": "post_tag",
                        "embeddable": true,
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/tags?post=255112"
                    }
                ],
                "curies": [
                    {
                        "name": "wp",
                        "href": "https:\/\/api.w.org\/{rel}",
                        "templated": true
                    }
                ]
            }
        },
        "id": 255112,
        "dateGmt": "2024-03-24T22:38:31",
        "modifiedDateGmt": "2024-03-30T23:27:44",
        "slug": "readable-code-tips-extract-complex-conditions",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-extract-complex-conditions\/",
        "title": "Readable code tips: Extract complex conditions",
        "content": "\n<p><em>Previous tip: <a href=\"https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-intro\/\">Introduction and naming with units<\/a><\/em><br><em>Next tip: <a href=\"https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/\">Don&#8217;t inline everything<\/a><\/em><\/p>\n\n\n\n<p>One idea that I learned <em>very<\/em> early on in my computing education was that you work &#8220;top down&#8221; by writing a high-level, abstract version of a more complex process, stating what you want to do, and then working on each of the sub-steps of the process.<\/p>\n\n\n\n<p>I&#8217;ve heard this called &#8220;pseudo-code&#8221; and &#8220;programming by wishful thinking&#8221; (as in &#8220;I wish there was a function called <code>getPostsFromApi()<\/code>&#8220;)<\/p>\n\n\n\n<p>I often come across complex conditions in code that are hard to read because they have multiple sub-conditions.<\/p>\n\n\n\n<p>Things like:<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: php; auto-links: false; gutter: false; title: ; quick-code: false; notranslate\" title=\"\">\nif (\n    pathinfo($filename, PATHINFO_EXTENSION) === 'txt' &amp;&amp;\n    file_exists($filename) &amp;&amp;\n    filetype($filename) === 'file'\n) {\n    ...\n}\n<\/pre><\/div>\n\n\n<p>I&#8217;m sure that these kinds of conditions normally evolve over time and so don&#8217;t exist as pseudo-code to start with. But the pseudo-code idea can now be used to make this easier to read:<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: php; auto-links: false; gutter: false; title: ; quick-code: false; notranslate\" title=\"\">\nfunction isExistingTextFile($filename) {\n\treturn\n        pathinfo($filename, PATHINFO_EXTENSION) === 'txt' &amp;&amp;\n        file_exists($filename) &amp;&amp;\n        filetype($filename) === 'file';\n}\n\nif (isExistingTextFile($filename)) {\n    ...\n}\n<\/pre><\/div>\n\n\n<p>This has the additional benefit that the <code>isExistingTextFile<\/code> function here is also reusable.<\/p>\n\n\n\n<p>And if you can <a href=\"https:\/\/rosswintle.uk\/2024\/03\/trusting-code\/\">build trust in your code base<\/a>, this is easier to read and faster to work with too.<\/p>\n",
        "excerpt": "<p>Refactoring complex conditions to make them more readable and easier to work with.<\/p>\n",
        "parentId": 0,
        "authorId": 2,
        "featuredMediaId": 0
    },
    {
        "dataAsArray": {
            "id": 255130,
            "date": "2024-03-30T23:24:17",
            "date_gmt": "2024-03-30T23:24:17",
            "guid": {
                "rendered": "https:\/\/rosswintle.uk\/?p=255130"
            },
            "modified": "2024-04-11T13:11:51",
            "modified_gmt": "2024-04-11T12:11:51",
            "slug": "readable-code-tips-dont-inline-everything",
            "status": "publish",
            "type": "post",
            "link": "https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/",
            "title": {
                "rendered": "Readable code tips: Don&#8217;t inline everything!"
            },
            "content": {
                "rendered": "\n<p><em>Previous Tip: <a href=\"https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-extract-complex-conditions\/\">Extract complex conditionals<\/a><\/em><\/p>\n\n\n\n<p>There is a balance to be found between &#8220;inlining&#8221; multiple expressions, and using temporary variables.<\/p>\n\n\n\n<p>This example uses lots of nicely named variables. But it&#8217;s like a wall of code that&#8217;s actually hard to read and surprisingly hard to reason about.<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: php; auto-links: false; gutter: false; title: ; quick-code: false; notranslate\" title=\"\">\nfunction isExistingTextFile($filename) {\n    $isEmptyFilename = ! is_empty($filename);\n    $isValidFilename =  strlen($filename) &gt; 5;\n    $isNonEmptyValidFilename = $isEmptyFilename &amp;&amp; $isValidFilename;\n    $filenameHasTextExtension = pathinfo($filename, PATHINFO_EXTENSION) === 'txt';\n    $fileExists = file_exists($filename);\n    $isValidTextFilename = $isNonEmptyValidFilename &amp;&amp; $fileNameHasTextExtension;\n    $isTextFile = $isValidTextFilename &amp;&amp; $fileExists;\n    return $isTextFile;\n}\n<\/pre><\/div>\n\n\n<p>One possible way to fix this is to say &#8220;Well, this is really just one condition. A single expression. Let&#8217;s just inline everything and return it:<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: php; auto-links: false; gutter: false; title: ; quick-code: false; notranslate\" title=\"\">\nfunction isExistingTextFile($filename) {\n    return ! is_empty($filename) &amp;&amp; strlen($filename) &gt; 5 &amp;&amp; pathinfo($filename, PATHINFO_EXTENSION) === 'txt' &amp;&amp; file_exists($filename);\n}\n<\/pre><\/div>\n\n\n<p>And on the face of it this is much nicer. But for me, this is the other extreme. It&#8217;s still actually kinda hard to read. I think that a good, well-named intermediate variable can actually help break down a multi-part expression like this.<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: php; auto-links: false; gutter: false; title: ; quick-code: false; notranslate\" title=\"\">\nfunction isExistingTextFile($filename) {\n\t$isValidFilename = ! is_empty($filename) &amp;&amp; strlen($filename) &gt; 5;\n\t$isTxtFile = $isValidFilename &amp;&amp; pathinfo($filename, PATHINFO_EXTENSION) === 'txt';\n\treturn $isTxtFile &amp;&amp; file_exists($filename);\n}\n<\/pre><\/div>\n\n\n<p>I think this is a nice middle ground with the final <code>return<\/code> being a readable statement of what we want to check for. And working our way back up the expressions we can see how each is also readable. In my opinion at least.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Bonus: A quick primer on short-circuit evaluation!<\/h2>\n\n\n\n<p>Now&#8230; to that &#8220;hard to reason about&#8221; piece. Why is this code hard to reason about? It seems pretty simple?<\/p>\n\n\n\n<p>Well if you&#8217;ve not heard of short-circuit evaluation, it&#8217;s worth finding out about.<\/p>\n\n\n\n<p>Boolean expressions can be made more efficient using short-circuit evaluation. When this happens, the computer runs the minimum number of checks required to complete the evaluation of the expression.<\/p>\n\n\n\n<p>There&#8217;s some words in there. Maybe that means nothing to you. So let&#8217;s look at an example.<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: php; auto-links: false; gutter: false; title: ; quick-code: false; notranslate\" title=\"\">\n$result = complexFunction1() &amp;&amp; complexFunction2();\n<\/pre><\/div>\n\n\n<p>Because we&#8217;re using <code>&amp;&amp;<\/code>, we don&#8217;t always have to call both functions.<\/p>\n\n\n\n<p>If the result of the first function is <code>false<\/code> then the whole thing is false. So <code>complexFunction2()<\/code> doesn&#8217;t <em>need<\/em> to be called to get the result. And in many programming languages, including PHP and JavaScript, it is <em>not<\/em> called.<\/p>\n\n\n\n<p>Wait? What?! You might be thinking.<\/p>\n\n\n\n<p>Yeah, this can be pretty powerful and we need to be careful with it.<\/p>\n\n\n\n<p>Imagine that these two complex function calls involve slow operations, say, database queries or API requests. It could be much quicker to only call the first function.<\/p>\n\n\n\n<p>Consider this case:<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: php; auto-links: false; gutter: false; title: ; quick-code: false; notranslate\" title=\"\">\n$result = createPost() &amp;&amp; publishPost();\n<\/pre><\/div>\n\n\n<p>In this case short-circuit evaluation helps us because if <code>createPost()<\/code> fails then <code>publishPost()<\/code> will also fail. But short-circuit evaluation means we don&#8217;t call <code>publishPost()<\/code>, which could save us time.<\/p>\n\n\n\n<p>Now what if we extracted variables here?<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: php; auto-links: false; gutter: false; title: ; quick-code: false; notranslate\" title=\"\">\n$isPostCreated = createPost();\n$isPostPublished = publishPost();\n$result = $isPostCreated &amp;&amp; $isPostPublished;\n<\/pre><\/div>\n\n\n<p>This is slightly contrived, and probably not what you would do. But if we did do this then <code>publishPost()<\/code> is ALWAYS called on the second line, even if <code>createPost()<\/code>fails and returns false.<\/p>\n\n\n\n<p>Note that short-circuit evaluation also works for <code>||<\/code> conditions, but backwards:<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: php; auto-links: false; gutter: false; title: ; quick-code: false; notranslate\" title=\"\">\n$result = complexFunction1() || complexFunction2();\n<\/pre><\/div>\n\n\n<p>Here if <code>complexFunction1()<\/code> is <code>true<\/code> then the whole expression will always be <code>true<\/code> and we don&#8217;t need to call <code>complexFunction2()<\/code> to determine that, and so it&#8217;s not called.<\/p>\n\n\n\n<p>So there might be a benefit to our fully-inlined version:<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: php; auto-links: false; gutter: false; title: ; quick-code: false; notranslate\" title=\"\">\nfunction isExistingTextFile($filename) {\n    return ! is_empty($filename) &amp;&amp; strlen($filename) &gt; 5 &amp;&amp; pathinfo($filename, PATHINFO_EXTENSION) === 'txt' &amp;&amp; file_exists($filename);\n}\n<\/pre><\/div>\n\n\n<p>because if we fail any step, the subsequent steps are not executed at all.<\/p>\n\n\n\n<p>I shall leave it up to the reader to look at the example code at the top of this post and try to figure out what is called and when. Did the code work differently as we inlined and then un-inlined the parts of the expression?<\/p>\n",
                "protected": false
            },
            "excerpt": {
                "rendered": "<p>There is a balance to be found between &#8220;inlining&#8221; multiple expressions, and using temporary variables. You may also learn about short-circuit evaluation here!<\/p>\n",
                "protected": false
            },
            "author": 2,
            "featured_media": 0,
            "comment_status": "closed",
            "ping_status": "closed",
            "sticky": false,
            "template": "",
            "format": "standard",
            "meta": {
                "sig_custom_text": "",
                "sig_image_type": "featured-image",
                "sig_custom_image": 0,
                "sig_is_disabled": false,
                "url": "",
                "footnotes": ""
            },
            "categories": [
                23
            ],
            "tags": [
                286
            ],
            "yoast_head": "<!-- This site is optimized with the Yoast SEO plugin v22.5 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Readable code tips: Don&#039;t inline everything! - Ross Wintle<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/\" \/>\n<meta property=\"og:locale\" content=\"en_GB\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Readable code tips: Don&#039;t inline everything! - Ross Wintle\" \/>\n<meta property=\"og:description\" content=\"There is a balance to be found between &quot;inlining&quot; multiple expressions, and using temporary variables. You may also learn about short-circuit evaluation here!\" \/>\n<meta property=\"og:url\" content=\"https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/\" \/>\n<meta property=\"og:site_name\" content=\"Ross Wintle\" \/>\n<meta property=\"article:published_time\" content=\"2024-03-30T23:24:17+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2024-04-11T12:11:51+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/rosswintle.uk\/wp-content\/uploads\/2012\/06\/DSC_0005-small.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"600\" \/>\n\t<meta property=\"og:image:height\" content=\"399\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/jpeg\" \/>\n<meta name=\"author\" content=\"Ross Wintle\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@magicroundabout\" \/>\n<meta name=\"twitter:site\" content=\"@magicroundabout\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Ross Wintle\" \/>\n\t<meta name=\"twitter:label2\" content=\"Estimated reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"3 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/\",\"url\":\"https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/\",\"name\":\"Readable code tips: Don't inline everything! - Ross Wintle\",\"isPartOf\":{\"@id\":\"https:\/\/rosswintle.uk\/#website\"},\"datePublished\":\"2024-03-30T23:24:17+00:00\",\"dateModified\":\"2024-04-11T12:11:51+00:00\",\"author\":{\"@id\":\"https:\/\/rosswintle.uk\/#\/schema\/person\/9f9bec147b2bfd762f09a2c2da7177dc\"},\"breadcrumb\":{\"@id\":\"https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/#breadcrumb\"},\"inLanguage\":\"en-GB\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/rosswintle.uk\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Readable code tips: Don&#8217;t inline everything!\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/rosswintle.uk\/#website\",\"url\":\"https:\/\/rosswintle.uk\/\",\"name\":\"Ross Wintle\",\"description\":\"Creativity, curiosity, and code\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/rosswintle.uk\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-GB\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/rosswintle.uk\/#\/schema\/person\/9f9bec147b2bfd762f09a2c2da7177dc\",\"name\":\"Ross Wintle\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-GB\",\"@id\":\"https:\/\/rosswintle.uk\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/28519fc7c37998eea059b525da5fc7ce?s=96&d=identicon&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/28519fc7c37998eea059b525da5fc7ce?s=96&d=identicon&r=g\",\"caption\":\"Ross Wintle\"},\"url\":\"https:\/\/rosswintle.uk\/author\/rosswintle\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->",
            "yoast_head_json": {
                "title": "Readable code tips: Don't inline everything! - Ross Wintle",
                "robots": {
                    "index": "index",
                    "follow": "follow",
                    "max-snippet": "max-snippet:-1",
                    "max-image-preview": "max-image-preview:large",
                    "max-video-preview": "max-video-preview:-1"
                },
                "canonical": "https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/",
                "og_locale": "en_GB",
                "og_type": "article",
                "og_title": "Readable code tips: Don't inline everything! - Ross Wintle",
                "og_description": "There is a balance to be found between \"inlining\" multiple expressions, and using temporary variables. You may also learn about short-circuit evaluation here!",
                "og_url": "https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/",
                "og_site_name": "Ross Wintle",
                "article_published_time": "2024-03-30T23:24:17+00:00",
                "article_modified_time": "2024-04-11T12:11:51+00:00",
                "og_image": [
                    {
                        "width": "600",
                        "height": "399",
                        "url": "https:\/\/rosswintle.uk\/wp-content\/uploads\/2012\/06\/DSC_0005-small.jpg",
                        "type": "image\/jpeg"
                    }
                ],
                "author": "Ross Wintle",
                "twitter_card": "summary_large_image",
                "twitter_creator": "@magicroundabout",
                "twitter_site": "@magicroundabout",
                "twitter_misc": {
                    "Written by": "Ross Wintle",
                    "Estimated reading time": "3 minutes"
                },
                "schema": {
                    "@context": "https:\/\/schema.org",
                    "@graph": [
                        {
                            "@type": "WebPage",
                            "@id": "https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/",
                            "url": "https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/",
                            "name": "Readable code tips: Don't inline everything! - Ross Wintle",
                            "isPartOf": {
                                "@id": "https:\/\/rosswintle.uk\/#website"
                            },
                            "datePublished": "2024-03-30T23:24:17+00:00",
                            "dateModified": "2024-04-11T12:11:51+00:00",
                            "author": {
                                "@id": "https:\/\/rosswintle.uk\/#\/schema\/person\/9f9bec147b2bfd762f09a2c2da7177dc"
                            },
                            "breadcrumb": {
                                "@id": "https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/#breadcrumb"
                            },
                            "inLanguage": "en-GB",
                            "potentialAction": [
                                {
                                    "@type": "ReadAction",
                                    "target": [
                                        "https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/"
                                    ]
                                }
                            ]
                        },
                        {
                            "@type": "BreadcrumbList",
                            "@id": "https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/#breadcrumb",
                            "itemListElement": [
                                {
                                    "@type": "ListItem",
                                    "position": 1,
                                    "name": "Home",
                                    "item": "https:\/\/rosswintle.uk\/"
                                },
                                {
                                    "@type": "ListItem",
                                    "position": 2,
                                    "name": "Readable code tips: Don&#8217;t inline everything!"
                                }
                            ]
                        },
                        {
                            "@type": "WebSite",
                            "@id": "https:\/\/rosswintle.uk\/#website",
                            "url": "https:\/\/rosswintle.uk\/",
                            "name": "Ross Wintle",
                            "description": "Creativity, curiosity, and code",
                            "potentialAction": [
                                {
                                    "@type": "SearchAction",
                                    "target": {
                                        "@type": "EntryPoint",
                                        "urlTemplate": "https:\/\/rosswintle.uk\/?s={search_term_string}"
                                    },
                                    "query-input": "required name=search_term_string"
                                }
                            ],
                            "inLanguage": "en-GB"
                        },
                        {
                            "@type": "Person",
                            "@id": "https:\/\/rosswintle.uk\/#\/schema\/person\/9f9bec147b2bfd762f09a2c2da7177dc",
                            "name": "Ross Wintle",
                            "image": {
                                "@type": "ImageObject",
                                "inLanguage": "en-GB",
                                "@id": "https:\/\/rosswintle.uk\/#\/schema\/person\/image\/",
                                "url": "https:\/\/secure.gravatar.com\/avatar\/28519fc7c37998eea059b525da5fc7ce?s=96&d=identicon&r=g",
                                "contentUrl": "https:\/\/secure.gravatar.com\/avatar\/28519fc7c37998eea059b525da5fc7ce?s=96&d=identicon&r=g",
                                "caption": "Ross Wintle"
                            },
                            "url": "https:\/\/rosswintle.uk\/author\/rosswintle\/"
                        }
                    ]
                }
            },
            "_links": {
                "self": [
                    {
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/posts\/255130"
                    }
                ],
                "collection": [
                    {
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/posts"
                    }
                ],
                "about": [
                    {
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/types\/post"
                    }
                ],
                "author": [
                    {
                        "embeddable": true,
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/users\/2"
                    }
                ],
                "replies": [
                    {
                        "embeddable": true,
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/comments?post=255130"
                    }
                ],
                "version-history": [
                    {
                        "count": 3,
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/posts\/255130\/revisions"
                    }
                ],
                "predecessor-version": [
                    {
                        "id": 255183,
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/posts\/255130\/revisions\/255183"
                    }
                ],
                "wp:attachment": [
                    {
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/media?parent=255130"
                    }
                ],
                "wp:term": [
                    {
                        "taxonomy": "category",
                        "embeddable": true,
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/categories?post=255130"
                    },
                    {
                        "taxonomy": "post_tag",
                        "embeddable": true,
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/tags?post=255130"
                    }
                ],
                "curies": [
                    {
                        "name": "wp",
                        "href": "https:\/\/api.w.org\/{rel}",
                        "templated": true
                    }
                ]
            }
        },
        "id": 255130,
        "dateGmt": "2024-03-30T23:24:17",
        "modifiedDateGmt": "2024-04-11T12:11:51",
        "slug": "readable-code-tips-dont-inline-everything",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-dont-inline-everything\/",
        "title": "Readable code tips: Don&#8217;t inline everything!",
        "content": "\n<p><em>Previous Tip: <a href=\"https:\/\/rosswintle.uk\/2024\/03\/readable-code-tips-extract-complex-conditions\/\">Extract complex conditionals<\/a><\/em><\/p>\n\n\n\n<p>There is a balance to be found between &#8220;inlining&#8221; multiple expressions, and using temporary variables.<\/p>\n\n\n\n<p>This example uses lots of nicely named variables. But it&#8217;s like a wall of code that&#8217;s actually hard to read and surprisingly hard to reason about.<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: php; auto-links: false; gutter: false; title: ; quick-code: false; notranslate\" title=\"\">\nfunction isExistingTextFile($filename) {\n    $isEmptyFilename = ! is_empty($filename);\n    $isValidFilename =  strlen($filename) &gt; 5;\n    $isNonEmptyValidFilename = $isEmptyFilename &amp;&amp; $isValidFilename;\n    $filenameHasTextExtension = pathinfo($filename, PATHINFO_EXTENSION) === 'txt';\n    $fileExists = file_exists($filename);\n    $isValidTextFilename = $isNonEmptyValidFilename &amp;&amp; $fileNameHasTextExtension;\n    $isTextFile = $isValidTextFilename &amp;&amp; $fileExists;\n    return $isTextFile;\n}\n<\/pre><\/div>\n\n\n<p>One possible way to fix this is to say &#8220;Well, this is really just one condition. A single expression. Let&#8217;s just inline everything and return it:<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: php; auto-links: false; gutter: false; title: ; quick-code: false; notranslate\" title=\"\">\nfunction isExistingTextFile($filename) {\n    return ! is_empty($filename) &amp;&amp; strlen($filename) &gt; 5 &amp;&amp; pathinfo($filename, PATHINFO_EXTENSION) === 'txt' &amp;&amp; file_exists($filename);\n}\n<\/pre><\/div>\n\n\n<p>And on the face of it this is much nicer. But for me, this is the other extreme. It&#8217;s still actually kinda hard to read. I think that a good, well-named intermediate variable can actually help break down a multi-part expression like this.<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: php; auto-links: false; gutter: false; title: ; quick-code: false; notranslate\" title=\"\">\nfunction isExistingTextFile($filename) {\n\t$isValidFilename = ! is_empty($filename) &amp;&amp; strlen($filename) &gt; 5;\n\t$isTxtFile = $isValidFilename &amp;&amp; pathinfo($filename, PATHINFO_EXTENSION) === 'txt';\n\treturn $isTxtFile &amp;&amp; file_exists($filename);\n}\n<\/pre><\/div>\n\n\n<p>I think this is a nice middle ground with the final <code>return<\/code> being a readable statement of what we want to check for. And working our way back up the expressions we can see how each is also readable. In my opinion at least.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Bonus: A quick primer on short-circuit evaluation!<\/h2>\n\n\n\n<p>Now&#8230; to that &#8220;hard to reason about&#8221; piece. Why is this code hard to reason about? It seems pretty simple?<\/p>\n\n\n\n<p>Well if you&#8217;ve not heard of short-circuit evaluation, it&#8217;s worth finding out about.<\/p>\n\n\n\n<p>Boolean expressions can be made more efficient using short-circuit evaluation. When this happens, the computer runs the minimum number of checks required to complete the evaluation of the expression.<\/p>\n\n\n\n<p>There&#8217;s some words in there. Maybe that means nothing to you. So let&#8217;s look at an example.<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: php; auto-links: false; gutter: false; title: ; quick-code: false; notranslate\" title=\"\">\n$result = complexFunction1() &amp;&amp; complexFunction2();\n<\/pre><\/div>\n\n\n<p>Because we&#8217;re using <code>&amp;&amp;<\/code>, we don&#8217;t always have to call both functions.<\/p>\n\n\n\n<p>If the result of the first function is <code>false<\/code> then the whole thing is false. So <code>complexFunction2()<\/code> doesn&#8217;t <em>need<\/em> to be called to get the result. And in many programming languages, including PHP and JavaScript, it is <em>not<\/em> called.<\/p>\n\n\n\n<p>Wait? What?! You might be thinking.<\/p>\n\n\n\n<p>Yeah, this can be pretty powerful and we need to be careful with it.<\/p>\n\n\n\n<p>Imagine that these two complex function calls involve slow operations, say, database queries or API requests. It could be much quicker to only call the first function.<\/p>\n\n\n\n<p>Consider this case:<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: php; auto-links: false; gutter: false; title: ; quick-code: false; notranslate\" title=\"\">\n$result = createPost() &amp;&amp; publishPost();\n<\/pre><\/div>\n\n\n<p>In this case short-circuit evaluation helps us because if <code>createPost()<\/code> fails then <code>publishPost()<\/code> will also fail. But short-circuit evaluation means we don&#8217;t call <code>publishPost()<\/code>, which could save us time.<\/p>\n\n\n\n<p>Now what if we extracted variables here?<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: php; auto-links: false; gutter: false; title: ; quick-code: false; notranslate\" title=\"\">\n$isPostCreated = createPost();\n$isPostPublished = publishPost();\n$result = $isPostCreated &amp;&amp; $isPostPublished;\n<\/pre><\/div>\n\n\n<p>This is slightly contrived, and probably not what you would do. But if we did do this then <code>publishPost()<\/code> is ALWAYS called on the second line, even if <code>createPost()<\/code>fails and returns false.<\/p>\n\n\n\n<p>Note that short-circuit evaluation also works for <code>||<\/code> conditions, but backwards:<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: php; auto-links: false; gutter: false; title: ; quick-code: false; notranslate\" title=\"\">\n$result = complexFunction1() || complexFunction2();\n<\/pre><\/div>\n\n\n<p>Here if <code>complexFunction1()<\/code> is <code>true<\/code> then the whole expression will always be <code>true<\/code> and we don&#8217;t need to call <code>complexFunction2()<\/code> to determine that, and so it&#8217;s not called.<\/p>\n\n\n\n<p>So there might be a benefit to our fully-inlined version:<\/p>\n\n\n<div class=\"wp-block-syntaxhighlighter-code \"><pre class=\"brush: php; auto-links: false; gutter: false; title: ; quick-code: false; notranslate\" title=\"\">\nfunction isExistingTextFile($filename) {\n    return ! is_empty($filename) &amp;&amp; strlen($filename) &gt; 5 &amp;&amp; pathinfo($filename, PATHINFO_EXTENSION) === 'txt' &amp;&amp; file_exists($filename);\n}\n<\/pre><\/div>\n\n\n<p>because if we fail any step, the subsequent steps are not executed at all.<\/p>\n\n\n\n<p>I shall leave it up to the reader to look at the example code at the top of this post and try to figure out what is called and when. Did the code work differently as we inlined and then un-inlined the parts of the expression?<\/p>\n",
        "excerpt": "<p>There is a balance to be found between &#8220;inlining&#8221; multiple expressions, and using temporary variables. You may also learn about short-circuit evaluation here!<\/p>\n",
        "parentId": 0,
        "authorId": 2,
        "featuredMediaId": 0
    },
    {
        "dataAsArray": {
            "id": 255187,
            "date": "2024-04-14T22:43:49",
            "date_gmt": "2024-04-14T21:43:49",
            "guid": {
                "rendered": "https:\/\/rosswintle.uk\/?p=255187"
            },
            "modified": "2024-04-14T22:45:48",
            "modified_gmt": "2024-04-14T21:45:48",
            "slug": "static-not-scrabble",
            "status": "publish",
            "type": "post",
            "link": "https:\/\/rosswintle.uk\/2024\/04\/static-not-scrabble\/",
            "title": {
                "rendered": "Static not-Scrabble."
            },
            "content": {
                "rendered": "\n<h2 class=\"wp-block-heading\">I made a completely free Scrabble-like game!<\/h2>\n\n\n\n<p>Pretty much all the online Scrabble games I&#8217;ve played are bloated, ad-ridden, gamified things that need sign-ups and stuff to play. I hate all this. I just want to play games without all the crud.<\/p>\n\n\n\n<p>I make <a href=\"https:\/\/rosswintle.uk\/2024\/02\/a-manifesto-for-small-static-web-apps\/\">simple web apps<\/a>. So why can&#8217;t I make a Scrabble clone?<\/p>\n\n\n\n<p>And I did! It&#8217;s still early days. Things don&#8217;t work or are broken. There are things it doesn&#8217;t do right. But this is kinda playable right now. Before you let me know things are broken please see if <a href=\"https:\/\/github.com\/rosswintle\/static-word-game\/issues\">I already know about it<\/a>.<\/p>\n\n\n\n<p><a href=\"https:\/\/words.pico.games\/\">https:\/\/words.pico.games\/<\/a><\/p>\n\n\n\n<p>Sure, this is not the BEST Scrabble clone. But it&#8217;s free, needs no sign up, has no ads. There are no catches. I just use <a href=\"https:\/\/usefathom.com\/ref\/SVE71E\">Fathom Analytics<\/a> to collect minimal, anonymised usage stats. That&#8217;s it! You can just play!<\/p>\n\n\n\n<p>But there&#8217;s something about it that the computer nerds will find interesting. I think. Read on if you want to know how this works because a static-file, multiplayer game without a login or database&#8230; how does that work?<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">How DOES it work? <\/h2>\n\n\n\n<p>Ages ago I heard a thing on a podcast, and I can&#8217;t even remember what it was, that made me wonder if you could have an online, multi-player, turn-based game where the game state is encoded in URLs and you just swap URLs with other people using messaging to take turns.<\/p>\n\n\n\n<p>You could prove this with something very simple like tic-tac-toe. But that seemed TOO simple. And I love word games. So Scrabble seemed to be a reasonable step up.<\/p>\n\n\n\n<p>What you are about to read is a technical deep-dive on encoding Scrabble games in URLs. This is kinda computer-sciencey stuff including binary representations of data, bitwise operations, and JavaScript &#8220;BigInts&#8221;. I hope it&#8217;s interesting to someone!<\/p>\n\n\n\n<p><em>Aside: Scrabble(TM) is owned by Mattel and Hasbro and they have enforced their copyright over some aspects of the game in the past, so I&#8217;m cautious about naming it and using anything of the game that may be copyrighted.<\/em><\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Computer Science &#8211; a quick primer on binary representations<\/h2>\n\n\n\n<p>We don&#8217;t talk a lot about &#8220;bits&#8221; in web development. The high-level languages we use, the speed of processing, and the memory we have available in computers nowadays means we don&#8217;t have to think about it much. But I want to do something <em>super<\/em> efficient here, so I&#8217;m turning to binary encoding.<\/p>\n\n\n\n<p>Under the hood, our computers use binary &#8211; 0&#8217;s and 1&#8217;s to represent data.<\/p>\n\n\n\n<p>Whole numbers usually translate pretty directly. Zero is <code>0<\/code> in binary. Eight is <code>1000<\/code>. Thirteen is <code>1101<\/code>. I won&#8217;t go into why here. But bigger numbers take up more bits.<\/p>\n\n\n\n<p>Boolean &#8220;true\/false&#8221; values can be represented in just a single bit!<\/p>\n\n\n\n<p>Letters and characters? Well, they are also converted to numbers. Numbers are really all that we&#8217;ve got. And computers use standardised codes for this. Major standards for encoding text are ASCII and Unicode (sometimes known as UTF).<\/p>\n\n\n\n<p>ASCII is pretty simple. Each character is given a number that fits into, say, 7 bits. 7 bits gives you numbers up to 128. That lets you have lower case and upper case Latin alphabet that we use for English, digits 0-9 and still have 66 slots for punctuation and other stuff.<\/p>\n\n\n\n<p><em>Aside: This is fine for English, but in the global world there&#8217;s a huge number of other characters we might want to use, and Unicode includes all sorts of non-Latin characters and all the emoji!<\/em><\/p>\n\n\n\n<p>But what if you don&#8217;t need punctuation? In Scrabble you only need single-case letters (and blanks) on your tiles. That&#8217;s 27 options. And 27 options fit into just 5 bits. So can we just do that?<\/p>\n\n\n\n<p>Of course you can!<\/p>\n\n\n\n<p>In fact, if you know what the &#8220;shape&#8221; of your data is, you can really efficiently &#8220;encode&#8221; it in Binary.<\/p>\n\n\n\n<p>I&#8217;m going to propose, below, that data for a &#8220;player&#8221; in Scrabble is:<\/p>\n\n\n\n<ul>\n<li>A score that is a number between 0 and 1000<\/li>\n\n\n\n<li>A &#8220;rack&#8221; of tiles, that is a list of 7 letters<\/li>\n<\/ul>\n\n\n\n<p>We know this data &#8220;shape&#8221;. So if we can somehow manipulate individual bits we can store a player as a single string of bits. 10 bits for the score. And 5 bits for each letter. 45 bits in total.<\/p>\n\n\n\n<p>This then raises questions though. Like, what if a player is at the end of the game and only has 4 tiles? Well, we can either use one of the spare (not-a-letter) 5-bit values to mean &#8220;empty&#8221;. OR&#8230; we could add another bit of data that says how many letters there are and only store those letters. The number 7 can be represented in 3 bits (<code>111<\/code>) so a player could be:<\/p>\n\n\n\n<ul>\n<li>A score that is a number between 0 and 1000 (10 bits)<\/li>\n\n\n\n<li>A count of the number of tiles in the rack (3 bits)<\/li>\n\n\n\n<li>A &#8220;rack&#8221; of tiles, that is a list of <em>up to<\/em> 7 letters (5 bits each)<\/li>\n<\/ul>\n\n\n\n<p>There&#8217;s a trade off here. If we have 7 letters then we&#8217;re adding 3 bits for the count.<\/p>\n\n\n\n<p>But if we have less than 7 letters, we <em>save<\/em> at least 2 bits (5 fewer bits for a letter, but 3 added for the count). A player with just one tile saves 27 bits!<\/p>\n\n\n\n<p>This is all super-nerdy stuff. But hopefully you see what I&#8217;m trying to do here.<\/p>\n\n\n\n<p>There is an issue though, and that&#8217;s that the languages we use on the web don&#8217;t necessarily make it easy to work with individual bits. I&#8217;ll come back to this later.<\/p>\n\n\n\n<p>In the meantime, given we know we can use bits in this way, how can we represent a Scrabble game?<\/p>\n\n\n\n<p>If you think this is all very interesting then I can highly recommend Julia Evan&#8217;s &#8220;Zine&#8221; (small-comic-book format) called &#8220;<a href=\"https:\/\/wizardzines.com\/zines\/integers-floats\/\">How Integers and Floats Work<\/a>&#8220;, and you can tinker with binary codes and numbers using her simple <a href=\"https:\/\/integer.exposed\/\">integer.exposed<\/a> tool.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Minimal Scrabble game representations<\/h2>\n\n\n\n<p>I started by wondering what the smallest way to represent a Scrabble-like game was. I don&#8217;t want URLs to get too long as I pass the game state around. So how can I do this efficiently?<\/p>\n\n\n\n<p>Things you COULD store are:<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">The board.<\/h3>\n\n\n\n<p>This is a 15&#215;15 square grid where each square can be empty or contain a letter.<\/p>\n\n\n\n<p>A letter can be one of 26 things, or a blank (which is different to empty!). If we do a minimal binary representation, this fits into 5 bits.<\/p>\n\n\n\n<p>Representing the whole board would take up up to 1,125 bits. That 161, 7-bit ASCII characters.<\/p>\n\n\n\n<p>Could you compress this? Maybe by encoding multiple empty spaces somehow? Maybe. But that gets complicated.<\/p>\n\n\n\n<p>What else do we need?<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">The Players<\/h3>\n\n\n\n<p>Players have a tile rack &#8211; that&#8217;s up to 7 lots of 5-bits-per-tile. So 35 bits.<\/p>\n\n\n\n<p>Players also have a score. That could be up to 1000, so let&#8217;s give that 10 bits.<\/p>\n\n\n\n<p>I&#8217;ll ignore names for now. I think we can do without that. Is that it? I think it is, as moves will be separate.<\/p>\n\n\n\n<p>So a player can be up to 45 bits each. That&#8217;s 7, 7-bit ASCII characters.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">The Tile Bag<\/h3>\n\n\n\n<p>You could choose to store the tile bag. There are 100 tiles, so this would be 100 * 5 = 500 bits.<\/p>\n\n\n\n<p>That&#8217;s another 72, 7-bit ASCII characters.<\/p>\n\n\n\n<p>Summing up, if you were to store data in this way: board state, player state and tile bag, that&#8217;s a total of 1,715 bits, or 245 characters. Not bad I suppose.<\/p>\n\n\n\n<p>There may be some efficiencies to be gained somewhere. But it would either:<\/p>\n\n\n\n<ul>\n<li>Be very minimal on average; or<\/li>\n\n\n\n<li>Add complexity to the encoding<\/li>\n<\/ul>\n\n\n\n<p>But it feels like there&#8217;s some data duplication here. Perhaps we can do better?<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Alternative: Store the Moves<\/h3>\n\n\n\n<p>Rather than storing the board and the player scores, we could just store a list of moves. This may be more efficient. But it may also be hard to tell.<\/p>\n\n\n\n<p>A list of moves can be &#8220;played back&#8221; onto the board to get player scores and the board state.<\/p>\n\n\n\n<p>You also don&#8217;t need to maintain a tile bag. The &#8220;full bag&#8221; minus all the used tiles (in players hands or on the board) gives you the tiles remaining. You can shuffle them whenever you like. You don&#8217;t have to keep the original shuffled order &#8211; that doesn&#8217;t affect the game.<\/p>\n\n\n\n<p>So what does a move look like? It can be tricky because a move can &#8220;wrap&#8221; around other letters or words on the board.<\/p>\n\n\n\n<p>There&#8217;s three options:<\/p>\n\n\n\n<ol>\n<li>Combine a starting point co-ordinate on the board with the entire word played. Oh, you&#8217;ll need a flag to say if it&#8217;s across or down too. For a 5-letter word, this would be 2 * 4-bit co-ordinates, a 1-bit flag, and 5 * 5-bit tiles. That&#8217;s 34 bits in total for a 5-letter word.<\/li>\n\n\n\n<li>Same as 1, but you only store the played tiles, and you skip existing tiles when you replay moves onto the board. That might reduce the storage from option 1 by a bit (for some moves, by a LOT!)<\/li>\n\n\n\n<li>Have a list of played tiles, each with their coordinates. This would be 2 * 4-bit co-ordinates and a 5-bit tile per letter played. So 13 bits per letter, or 65 bits for a 5-letter word.<\/li>\n<\/ol>\n\n\n\n<p>Option 3 seems inefficient, especially for longer words.<\/p>\n\n\n\n<p>Option 2, in hindsight seems best. But I didn&#8217;t consider it at the time.<\/p>\n\n\n\n<p>So I went with option 1.<\/p>\n\n\n\n<p>The internet says that the average number of words played in a game seems to be between 16 and 22 per player. It feels like a low-move game would have longer words. There&#8217;s 100 tiles. A 34-move game averages very close to 3 tiles per move. So that&#8217;s 8 + 1 + (3 * 5) = 24 bits per move, and 34 * 24 = 816 bits for an average-looking game.<\/p>\n\n\n\n<p>This is better than storing a 1,125-bit board. It will vary per game, but we&#8217;ve reduced the ASCII character representation to 117 characters from 161. That&#8217;s pretty good.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">A conclusion on game storage<\/h3>\n\n\n\n<p>So a minimal data set is:<\/p>\n\n\n\n<ul>\n<li>Array of moves at 5<em>n<\/em> + 9 bits per move and an average-looking game using around 816 bits.<\/li>\n\n\n\n<li>Player tile &#8220;racks&#8221; at 5 * 7 = 35 bits each. 70 bits total.<\/li>\n<\/ul>\n\n\n\n<p>That&#8217;s it. Everything else &#8211; the board, the tile bag, the scores, can all be derived from this.<\/p>\n\n\n\n<p>Is this the most efficient way? I wouldn&#8217;t really know without some experimentation or writing some complicated formulae. There may be games where another encoding works better. But this seems good to me.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Working with bits in JavaScript<\/h2>\n\n\n\n<p>As I said before, it&#8217;s not entirely easy working with individual bits in modern web development languages.<\/p>\n\n\n\n<p>I&#8217;m making a Scrabble-like web app, so JavaScript is the language I have to hand.<\/p>\n\n\n\n<p>JavaScript <em>does<\/em> provide operators for working with bits. But the difficulty is that its types are more abstract\/high level. And the JavaScript <code>Number<\/code> type doesn&#8217;t directly map whole numbers into Binary. All numbers in JavaScript are actually &#8220;floating point&#8221;, which means <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Number#number_encoding\">they are stored in a complicated format<\/a> that&#8217;s suitable for both whole numbers (&#8220;integers&#8221;) and decimal numbers.<\/p>\n\n\n\n<p>HOWEVER&#8230; while I was thinking about this I remembered that JavaScript has a &#8220;<a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/BigInt\">BigInt<\/a>&#8221; type for storing &#8220;Big Integers&#8221;. This sounds good. We need integers really.<\/p>\n\n\n\n<p>And BigInt&#8217;s support <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Operators#bitwise_shift_operators\">binary (&#8220;bitwise&#8221;) operators<\/a> like shifts (which move binary numbers left and right) and logical AND \/ OR. These are exactly what we need, and it seems that a BigInt is almost unlimited in size, and so a single BigInt can represent a Player, a Move, or an entire game!!<\/p>\n\n\n\n<p>This is exactly what I need.<\/p>\n\n\n\n<p><em>And just to note again, if you think this is all very interesting then I can highly recommend Julia Evan&#8217;s &#8220;Zine&#8221; (small-comic-book format) called &#8220;<a href=\"https:\/\/wizardzines.com\/zines\/integers-floats\/\">How Integers and Floats Work<\/a>&#8220;, and you can tinker with binary codes and numbers using her simple <a href=\"https:\/\/integer.exposed\/\">integer.exposed<\/a> tool.<\/em><\/p>\n\n\n\n<h2 class=\"wp-block-heading\">A small library class for bitwise manipulation of BigInts<\/h2>\n\n\n\n<p>The BigInt&#8217;s worked out GREAT!<\/p>\n\n\n\n<p>But I found myself doing a lot of what I called &#8220;push&#8221; and &#8220;pop&#8221;, of bits like with Arrays. Like, &#8220;Here&#8217;s a number that&#8217;s less than 15. It&#8217;s 3 bits long. Please &#8220;push&#8221; it onto the right-hand side of my BigInt.<\/p>\n\n\n\n<p>(A push &#8220;left shifts&#8221; the bits of the BigInt to the left and then does a logical OR to add the new bits on. A pull does a logical &#8220;AND&#8221; of the BigInt with a mask like <code>1111111<\/code> to get the popped value, and then &#8220;right shifts&#8221; the BigInt to move everything along.)<\/p>\n\n\n\n<p>Abstracting this made my encoding and decoding work much easier. And I included functions\/methods to convert the BigInt to and from both ASCII (7 bits at a time!) and then also into Base64, which can be sent in a URL! YAY!<\/p>\n\n\n\n<p>You can see that little helper class in <a href=\"https:\/\/gist.github.com\/rosswintle\/94f7778a2cad77eb4520490ed61d99e1\">this Gist<\/a>.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Making the game work<\/h2>\n\n\n\n<p>With all that binary data representation done, I could get on with building the game.<\/p>\n\n\n\n<p>It turns out that complex game UI and logic can be a bit tricky. I&#8217;ve got the game to a state where it works in it&#8217;s basic form. It&#8217;s playable. And that&#8217;s great.<\/p>\n\n\n\n<p>I could write a whole other post about all the user interface concerns and algorithms for doing stuff.<\/p>\n\n\n\n<p>I mean, it&#8217;s not <strong>hard<\/strong> hard. It&#8217;s not Tears of the Kingdom or Call of Duty. But for a little web-based side-project? There&#8217;s been a lot to think about.<\/p>\n\n\n\n<p>Right now I&#8217;m doing some simple play testing of the mechanic of sending links back and forth. Interestingly, most of the feedback I&#8217;ve had has either been about Scrabble stuff that I&#8217;ve not implemented yet, or about the UI. No one has really complained that sending links back and forth over messenger is annoying. So that&#8217;s good.<\/p>\n\n\n\n<p>Why not give it a go? It&#8217;s at <a href=\"https:\/\/words.pico.games\/\">https:\/\/words.pico.games\/<\/a>, and it&#8217;s totally free. <\/p>\n\n\n\n<p>Let me know what you think, but be sure to check GitHub issues before you report anything to see if I already know about it.<\/p>\n\n\n\n<p>Enjoy!<\/p>\n\n\n\n<ol><\/ol>\n",
                "protected": false
            },
            "excerpt": {
                "rendered": "<p>I made a server-less Scrabble clone that saves data in URLs. This post explains why and how, including a primer on binary data representations, and a little JavaScript library to help do this using BigInts!<\/p>\n",
                "protected": false
            },
            "author": 2,
            "featured_media": 0,
            "comment_status": "closed",
            "ping_status": "closed",
            "sticky": false,
            "template": "",
            "format": "standard",
            "meta": {
                "sig_custom_text": "",
                "sig_image_type": "featured-image",
                "sig_custom_image": 0,
                "sig_is_disabled": false,
                "url": "",
                "footnotes": ""
            },
            "categories": [
                23
            ],
            "tags": [
                286,
                666,
                618,
                107,
                16236
            ],
            "yoast_head": "<!-- This site is optimized with the Yoast SEO plugin v22.5 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Static not-Scrabble. - Ross Wintle<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/rosswintle.uk\/2024\/04\/static-not-scrabble\/\" \/>\n<meta property=\"og:locale\" content=\"en_GB\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Static not-Scrabble. - Ross Wintle\" \/>\n<meta property=\"og:description\" content=\"I made a server-less Scrabble clone that saves data in URLs. This post explains why and how, including a primer on binary data representations, and a little JavaScript library to help do this using BigInts!\" \/>\n<meta property=\"og:url\" content=\"https:\/\/rosswintle.uk\/2024\/04\/static-not-scrabble\/\" \/>\n<meta property=\"og:site_name\" content=\"Ross Wintle\" \/>\n<meta property=\"article:published_time\" content=\"2024-04-14T21:43:49+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2024-04-14T21:45:48+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/rosswintle.uk\/wp-content\/uploads\/2012\/06\/DSC_0005-small.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"600\" \/>\n\t<meta property=\"og:image:height\" content=\"399\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/jpeg\" \/>\n<meta name=\"author\" content=\"Ross Wintle\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:creator\" content=\"@magicroundabout\" \/>\n<meta name=\"twitter:site\" content=\"@magicroundabout\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Ross Wintle\" \/>\n\t<meta name=\"twitter:label2\" content=\"Estimated reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"11 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"WebPage\",\"@id\":\"https:\/\/rosswintle.uk\/2024\/04\/static-not-scrabble\/\",\"url\":\"https:\/\/rosswintle.uk\/2024\/04\/static-not-scrabble\/\",\"name\":\"Static not-Scrabble. - Ross Wintle\",\"isPartOf\":{\"@id\":\"https:\/\/rosswintle.uk\/#website\"},\"datePublished\":\"2024-04-14T21:43:49+00:00\",\"dateModified\":\"2024-04-14T21:45:48+00:00\",\"author\":{\"@id\":\"https:\/\/rosswintle.uk\/#\/schema\/person\/9f9bec147b2bfd762f09a2c2da7177dc\"},\"breadcrumb\":{\"@id\":\"https:\/\/rosswintle.uk\/2024\/04\/static-not-scrabble\/#breadcrumb\"},\"inLanguage\":\"en-GB\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/rosswintle.uk\/2024\/04\/static-not-scrabble\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/rosswintle.uk\/2024\/04\/static-not-scrabble\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/rosswintle.uk\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Static not-Scrabble.\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/rosswintle.uk\/#website\",\"url\":\"https:\/\/rosswintle.uk\/\",\"name\":\"Ross Wintle\",\"description\":\"Creativity, curiosity, and code\",\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/rosswintle.uk\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-GB\"},{\"@type\":\"Person\",\"@id\":\"https:\/\/rosswintle.uk\/#\/schema\/person\/9f9bec147b2bfd762f09a2c2da7177dc\",\"name\":\"Ross Wintle\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-GB\",\"@id\":\"https:\/\/rosswintle.uk\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/28519fc7c37998eea059b525da5fc7ce?s=96&d=identicon&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/28519fc7c37998eea059b525da5fc7ce?s=96&d=identicon&r=g\",\"caption\":\"Ross Wintle\"},\"url\":\"https:\/\/rosswintle.uk\/author\/rosswintle\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->",
            "yoast_head_json": {
                "title": "Static not-Scrabble. - Ross Wintle",
                "robots": {
                    "index": "index",
                    "follow": "follow",
                    "max-snippet": "max-snippet:-1",
                    "max-image-preview": "max-image-preview:large",
                    "max-video-preview": "max-video-preview:-1"
                },
                "canonical": "https:\/\/rosswintle.uk\/2024\/04\/static-not-scrabble\/",
                "og_locale": "en_GB",
                "og_type": "article",
                "og_title": "Static not-Scrabble. - Ross Wintle",
                "og_description": "I made a server-less Scrabble clone that saves data in URLs. This post explains why and how, including a primer on binary data representations, and a little JavaScript library to help do this using BigInts!",
                "og_url": "https:\/\/rosswintle.uk\/2024\/04\/static-not-scrabble\/",
                "og_site_name": "Ross Wintle",
                "article_published_time": "2024-04-14T21:43:49+00:00",
                "article_modified_time": "2024-04-14T21:45:48+00:00",
                "og_image": [
                    {
                        "width": "600",
                        "height": "399",
                        "url": "https:\/\/rosswintle.uk\/wp-content\/uploads\/2012\/06\/DSC_0005-small.jpg",
                        "type": "image\/jpeg"
                    }
                ],
                "author": "Ross Wintle",
                "twitter_card": "summary_large_image",
                "twitter_creator": "@magicroundabout",
                "twitter_site": "@magicroundabout",
                "twitter_misc": {
                    "Written by": "Ross Wintle",
                    "Estimated reading time": "11 minutes"
                },
                "schema": {
                    "@context": "https:\/\/schema.org",
                    "@graph": [
                        {
                            "@type": "WebPage",
                            "@id": "https:\/\/rosswintle.uk\/2024\/04\/static-not-scrabble\/",
                            "url": "https:\/\/rosswintle.uk\/2024\/04\/static-not-scrabble\/",
                            "name": "Static not-Scrabble. - Ross Wintle",
                            "isPartOf": {
                                "@id": "https:\/\/rosswintle.uk\/#website"
                            },
                            "datePublished": "2024-04-14T21:43:49+00:00",
                            "dateModified": "2024-04-14T21:45:48+00:00",
                            "author": {
                                "@id": "https:\/\/rosswintle.uk\/#\/schema\/person\/9f9bec147b2bfd762f09a2c2da7177dc"
                            },
                            "breadcrumb": {
                                "@id": "https:\/\/rosswintle.uk\/2024\/04\/static-not-scrabble\/#breadcrumb"
                            },
                            "inLanguage": "en-GB",
                            "potentialAction": [
                                {
                                    "@type": "ReadAction",
                                    "target": [
                                        "https:\/\/rosswintle.uk\/2024\/04\/static-not-scrabble\/"
                                    ]
                                }
                            ]
                        },
                        {
                            "@type": "BreadcrumbList",
                            "@id": "https:\/\/rosswintle.uk\/2024\/04\/static-not-scrabble\/#breadcrumb",
                            "itemListElement": [
                                {
                                    "@type": "ListItem",
                                    "position": 1,
                                    "name": "Home",
                                    "item": "https:\/\/rosswintle.uk\/"
                                },
                                {
                                    "@type": "ListItem",
                                    "position": 2,
                                    "name": "Static not-Scrabble."
                                }
                            ]
                        },
                        {
                            "@type": "WebSite",
                            "@id": "https:\/\/rosswintle.uk\/#website",
                            "url": "https:\/\/rosswintle.uk\/",
                            "name": "Ross Wintle",
                            "description": "Creativity, curiosity, and code",
                            "potentialAction": [
                                {
                                    "@type": "SearchAction",
                                    "target": {
                                        "@type": "EntryPoint",
                                        "urlTemplate": "https:\/\/rosswintle.uk\/?s={search_term_string}"
                                    },
                                    "query-input": "required name=search_term_string"
                                }
                            ],
                            "inLanguage": "en-GB"
                        },
                        {
                            "@type": "Person",
                            "@id": "https:\/\/rosswintle.uk\/#\/schema\/person\/9f9bec147b2bfd762f09a2c2da7177dc",
                            "name": "Ross Wintle",
                            "image": {
                                "@type": "ImageObject",
                                "inLanguage": "en-GB",
                                "@id": "https:\/\/rosswintle.uk\/#\/schema\/person\/image\/",
                                "url": "https:\/\/secure.gravatar.com\/avatar\/28519fc7c37998eea059b525da5fc7ce?s=96&d=identicon&r=g",
                                "contentUrl": "https:\/\/secure.gravatar.com\/avatar\/28519fc7c37998eea059b525da5fc7ce?s=96&d=identicon&r=g",
                                "caption": "Ross Wintle"
                            },
                            "url": "https:\/\/rosswintle.uk\/author\/rosswintle\/"
                        }
                    ]
                }
            },
            "_links": {
                "self": [
                    {
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/posts\/255187"
                    }
                ],
                "collection": [
                    {
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/posts"
                    }
                ],
                "about": [
                    {
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/types\/post"
                    }
                ],
                "author": [
                    {
                        "embeddable": true,
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/users\/2"
                    }
                ],
                "replies": [
                    {
                        "embeddable": true,
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/comments?post=255187"
                    }
                ],
                "version-history": [
                    {
                        "count": 6,
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/posts\/255187\/revisions"
                    }
                ],
                "predecessor-version": [
                    {
                        "id": 255195,
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/posts\/255187\/revisions\/255195"
                    }
                ],
                "wp:attachment": [
                    {
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/media?parent=255187"
                    }
                ],
                "wp:term": [
                    {
                        "taxonomy": "category",
                        "embeddable": true,
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/categories?post=255187"
                    },
                    {
                        "taxonomy": "post_tag",
                        "embeddable": true,
                        "href": "https:\/\/rosswintle.uk\/wp-json\/wp\/v2\/tags?post=255187"
                    }
                ],
                "curies": [
                    {
                        "name": "wp",
                        "href": "https:\/\/api.w.org\/{rel}",
                        "templated": true
                    }
                ]
            }
        },
        "id": 255187,
        "dateGmt": "2024-04-14T21:43:49",
        "modifiedDateGmt": "2024-04-14T21:45:48",
        "slug": "static-not-scrabble",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/rosswintle.uk\/2024\/04\/static-not-scrabble\/",
        "title": "Static not-Scrabble.",
        "content": "\n<h2 class=\"wp-block-heading\">I made a completely free Scrabble-like game!<\/h2>\n\n\n\n<p>Pretty much all the online Scrabble games I&#8217;ve played are bloated, ad-ridden, gamified things that need sign-ups and stuff to play. I hate all this. I just want to play games without all the crud.<\/p>\n\n\n\n<p>I make <a href=\"https:\/\/rosswintle.uk\/2024\/02\/a-manifesto-for-small-static-web-apps\/\">simple web apps<\/a>. So why can&#8217;t I make a Scrabble clone?<\/p>\n\n\n\n<p>And I did! It&#8217;s still early days. Things don&#8217;t work or are broken. There are things it doesn&#8217;t do right. But this is kinda playable right now. Before you let me know things are broken please see if <a href=\"https:\/\/github.com\/rosswintle\/static-word-game\/issues\">I already know about it<\/a>.<\/p>\n\n\n\n<p><a href=\"https:\/\/words.pico.games\/\">https:\/\/words.pico.games\/<\/a><\/p>\n\n\n\n<p>Sure, this is not the BEST Scrabble clone. But it&#8217;s free, needs no sign up, has no ads. There are no catches. I just use <a href=\"https:\/\/usefathom.com\/ref\/SVE71E\">Fathom Analytics<\/a> to collect minimal, anonymised usage stats. That&#8217;s it! You can just play!<\/p>\n\n\n\n<p>But there&#8217;s something about it that the computer nerds will find interesting. I think. Read on if you want to know how this works because a static-file, multiplayer game without a login or database&#8230; how does that work?<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">How DOES it work? <\/h2>\n\n\n\n<p>Ages ago I heard a thing on a podcast, and I can&#8217;t even remember what it was, that made me wonder if you could have an online, multi-player, turn-based game where the game state is encoded in URLs and you just swap URLs with other people using messaging to take turns.<\/p>\n\n\n\n<p>You could prove this with something very simple like tic-tac-toe. But that seemed TOO simple. And I love word games. So Scrabble seemed to be a reasonable step up.<\/p>\n\n\n\n<p>What you are about to read is a technical deep-dive on encoding Scrabble games in URLs. This is kinda computer-sciencey stuff including binary representations of data, bitwise operations, and JavaScript &#8220;BigInts&#8221;. I hope it&#8217;s interesting to someone!<\/p>\n\n\n\n<p><em>Aside: Scrabble(TM) is owned by Mattel and Hasbro and they have enforced their copyright over some aspects of the game in the past, so I&#8217;m cautious about naming it and using anything of the game that may be copyrighted.<\/em><\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Computer Science &#8211; a quick primer on binary representations<\/h2>\n\n\n\n<p>We don&#8217;t talk a lot about &#8220;bits&#8221; in web development. The high-level languages we use, the speed of processing, and the memory we have available in computers nowadays means we don&#8217;t have to think about it much. But I want to do something <em>super<\/em> efficient here, so I&#8217;m turning to binary encoding.<\/p>\n\n\n\n<p>Under the hood, our computers use binary &#8211; 0&#8217;s and 1&#8217;s to represent data.<\/p>\n\n\n\n<p>Whole numbers usually translate pretty directly. Zero is <code>0<\/code> in binary. Eight is <code>1000<\/code>. Thirteen is <code>1101<\/code>. I won&#8217;t go into why here. But bigger numbers take up more bits.<\/p>\n\n\n\n<p>Boolean &#8220;true\/false&#8221; values can be represented in just a single bit!<\/p>\n\n\n\n<p>Letters and characters? Well, they are also converted to numbers. Numbers are really all that we&#8217;ve got. And computers use standardised codes for this. Major standards for encoding text are ASCII and Unicode (sometimes known as UTF).<\/p>\n\n\n\n<p>ASCII is pretty simple. Each character is given a number that fits into, say, 7 bits. 7 bits gives you numbers up to 128. That lets you have lower case and upper case Latin alphabet that we use for English, digits 0-9 and still have 66 slots for punctuation and other stuff.<\/p>\n\n\n\n<p><em>Aside: This is fine for English, but in the global world there&#8217;s a huge number of other characters we might want to use, and Unicode includes all sorts of non-Latin characters and all the emoji!<\/em><\/p>\n\n\n\n<p>But what if you don&#8217;t need punctuation? In Scrabble you only need single-case letters (and blanks) on your tiles. That&#8217;s 27 options. And 27 options fit into just 5 bits. So can we just do that?<\/p>\n\n\n\n<p>Of course you can!<\/p>\n\n\n\n<p>In fact, if you know what the &#8220;shape&#8221; of your data is, you can really efficiently &#8220;encode&#8221; it in Binary.<\/p>\n\n\n\n<p>I&#8217;m going to propose, below, that data for a &#8220;player&#8221; in Scrabble is:<\/p>\n\n\n\n<ul>\n<li>A score that is a number between 0 and 1000<\/li>\n\n\n\n<li>A &#8220;rack&#8221; of tiles, that is a list of 7 letters<\/li>\n<\/ul>\n\n\n\n<p>We know this data &#8220;shape&#8221;. So if we can somehow manipulate individual bits we can store a player as a single string of bits. 10 bits for the score. And 5 bits for each letter. 45 bits in total.<\/p>\n\n\n\n<p>This then raises questions though. Like, what if a player is at the end of the game and only has 4 tiles? Well, we can either use one of the spare (not-a-letter) 5-bit values to mean &#8220;empty&#8221;. OR&#8230; we could add another bit of data that says how many letters there are and only store those letters. The number 7 can be represented in 3 bits (<code>111<\/code>) so a player could be:<\/p>\n\n\n\n<ul>\n<li>A score that is a number between 0 and 1000 (10 bits)<\/li>\n\n\n\n<li>A count of the number of tiles in the rack (3 bits)<\/li>\n\n\n\n<li>A &#8220;rack&#8221; of tiles, that is a list of <em>up to<\/em> 7 letters (5 bits each)<\/li>\n<\/ul>\n\n\n\n<p>There&#8217;s a trade off here. If we have 7 letters then we&#8217;re adding 3 bits for the count.<\/p>\n\n\n\n<p>But if we have less than 7 letters, we <em>save<\/em> at least 2 bits (5 fewer bits for a letter, but 3 added for the count). A player with just one tile saves 27 bits!<\/p>\n\n\n\n<p>This is all super-nerdy stuff. But hopefully you see what I&#8217;m trying to do here.<\/p>\n\n\n\n<p>There is an issue though, and that&#8217;s that the languages we use on the web don&#8217;t necessarily make it easy to work with individual bits. I&#8217;ll come back to this later.<\/p>\n\n\n\n<p>In the meantime, given we know we can use bits in this way, how can we represent a Scrabble game?<\/p>\n\n\n\n<p>If you think this is all very interesting then I can highly recommend Julia Evan&#8217;s &#8220;Zine&#8221; (small-comic-book format) called &#8220;<a href=\"https:\/\/wizardzines.com\/zines\/integers-floats\/\">How Integers and Floats Work<\/a>&#8220;, and you can tinker with binary codes and numbers using her simple <a href=\"https:\/\/integer.exposed\/\">integer.exposed<\/a> tool.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Minimal Scrabble game representations<\/h2>\n\n\n\n<p>I started by wondering what the smallest way to represent a Scrabble-like game was. I don&#8217;t want URLs to get too long as I pass the game state around. So how can I do this efficiently?<\/p>\n\n\n\n<p>Things you COULD store are:<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">The board.<\/h3>\n\n\n\n<p>This is a 15&#215;15 square grid where each square can be empty or contain a letter.<\/p>\n\n\n\n<p>A letter can be one of 26 things, or a blank (which is different to empty!). If we do a minimal binary representation, this fits into 5 bits.<\/p>\n\n\n\n<p>Representing the whole board would take up up to 1,125 bits. That 161, 7-bit ASCII characters.<\/p>\n\n\n\n<p>Could you compress this? Maybe by encoding multiple empty spaces somehow? Maybe. But that gets complicated.<\/p>\n\n\n\n<p>What else do we need?<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">The Players<\/h3>\n\n\n\n<p>Players have a tile rack &#8211; that&#8217;s up to 7 lots of 5-bits-per-tile. So 35 bits.<\/p>\n\n\n\n<p>Players also have a score. That could be up to 1000, so let&#8217;s give that 10 bits.<\/p>\n\n\n\n<p>I&#8217;ll ignore names for now. I think we can do without that. Is that it? I think it is, as moves will be separate.<\/p>\n\n\n\n<p>So a player can be up to 45 bits each. That&#8217;s 7, 7-bit ASCII characters.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">The Tile Bag<\/h3>\n\n\n\n<p>You could choose to store the tile bag. There are 100 tiles, so this would be 100 * 5 = 500 bits.<\/p>\n\n\n\n<p>That&#8217;s another 72, 7-bit ASCII characters.<\/p>\n\n\n\n<p>Summing up, if you were to store data in this way: board state, player state and tile bag, that&#8217;s a total of 1,715 bits, or 245 characters. Not bad I suppose.<\/p>\n\n\n\n<p>There may be some efficiencies to be gained somewhere. But it would either:<\/p>\n\n\n\n<ul>\n<li>Be very minimal on average; or<\/li>\n\n\n\n<li>Add complexity to the encoding<\/li>\n<\/ul>\n\n\n\n<p>But it feels like there&#8217;s some data duplication here. Perhaps we can do better?<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">Alternative: Store the Moves<\/h3>\n\n\n\n<p>Rather than storing the board and the player scores, we could just store a list of moves. This may be more efficient. But it may also be hard to tell.<\/p>\n\n\n\n<p>A list of moves can be &#8220;played back&#8221; onto the board to get player scores and the board state.<\/p>\n\n\n\n<p>You also don&#8217;t need to maintain a tile bag. The &#8220;full bag&#8221; minus all the used tiles (in players hands or on the board) gives you the tiles remaining. You can shuffle them whenever you like. You don&#8217;t have to keep the original shuffled order &#8211; that doesn&#8217;t affect the game.<\/p>\n\n\n\n<p>So what does a move look like? It can be tricky because a move can &#8220;wrap&#8221; around other letters or words on the board.<\/p>\n\n\n\n<p>There&#8217;s three options:<\/p>\n\n\n\n<ol>\n<li>Combine a starting point co-ordinate on the board with the entire word played. Oh, you&#8217;ll need a flag to say if it&#8217;s across or down too. For a 5-letter word, this would be 2 * 4-bit co-ordinates, a 1-bit flag, and 5 * 5-bit tiles. That&#8217;s 34 bits in total for a 5-letter word.<\/li>\n\n\n\n<li>Same as 1, but you only store the played tiles, and you skip existing tiles when you replay moves onto the board. That might reduce the storage from option 1 by a bit (for some moves, by a LOT!)<\/li>\n\n\n\n<li>Have a list of played tiles, each with their coordinates. This would be 2 * 4-bit co-ordinates and a 5-bit tile per letter played. So 13 bits per letter, or 65 bits for a 5-letter word.<\/li>\n<\/ol>\n\n\n\n<p>Option 3 seems inefficient, especially for longer words.<\/p>\n\n\n\n<p>Option 2, in hindsight seems best. But I didn&#8217;t consider it at the time.<\/p>\n\n\n\n<p>So I went with option 1.<\/p>\n\n\n\n<p>The internet says that the average number of words played in a game seems to be between 16 and 22 per player. It feels like a low-move game would have longer words. There&#8217;s 100 tiles. A 34-move game averages very close to 3 tiles per move. So that&#8217;s 8 + 1 + (3 * 5) = 24 bits per move, and 34 * 24 = 816 bits for an average-looking game.<\/p>\n\n\n\n<p>This is better than storing a 1,125-bit board. It will vary per game, but we&#8217;ve reduced the ASCII character representation to 117 characters from 161. That&#8217;s pretty good.<\/p>\n\n\n\n<h3 class=\"wp-block-heading\">A conclusion on game storage<\/h3>\n\n\n\n<p>So a minimal data set is:<\/p>\n\n\n\n<ul>\n<li>Array of moves at 5<em>n<\/em> + 9 bits per move and an average-looking game using around 816 bits.<\/li>\n\n\n\n<li>Player tile &#8220;racks&#8221; at 5 * 7 = 35 bits each. 70 bits total.<\/li>\n<\/ul>\n\n\n\n<p>That&#8217;s it. Everything else &#8211; the board, the tile bag, the scores, can all be derived from this.<\/p>\n\n\n\n<p>Is this the most efficient way? I wouldn&#8217;t really know without some experimentation or writing some complicated formulae. There may be games where another encoding works better. But this seems good to me.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Working with bits in JavaScript<\/h2>\n\n\n\n<p>As I said before, it&#8217;s not entirely easy working with individual bits in modern web development languages.<\/p>\n\n\n\n<p>I&#8217;m making a Scrabble-like web app, so JavaScript is the language I have to hand.<\/p>\n\n\n\n<p>JavaScript <em>does<\/em> provide operators for working with bits. But the difficulty is that its types are more abstract\/high level. And the JavaScript <code>Number<\/code> type doesn&#8217;t directly map whole numbers into Binary. All numbers in JavaScript are actually &#8220;floating point&#8221;, which means <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Number#number_encoding\">they are stored in a complicated format<\/a> that&#8217;s suitable for both whole numbers (&#8220;integers&#8221;) and decimal numbers.<\/p>\n\n\n\n<p>HOWEVER&#8230; while I was thinking about this I remembered that JavaScript has a &#8220;<a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/BigInt\">BigInt<\/a>&#8221; type for storing &#8220;Big Integers&#8221;. This sounds good. We need integers really.<\/p>\n\n\n\n<p>And BigInt&#8217;s support <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Operators#bitwise_shift_operators\">binary (&#8220;bitwise&#8221;) operators<\/a> like shifts (which move binary numbers left and right) and logical AND \/ OR. These are exactly what we need, and it seems that a BigInt is almost unlimited in size, and so a single BigInt can represent a Player, a Move, or an entire game!!<\/p>\n\n\n\n<p>This is exactly what I need.<\/p>\n\n\n\n<p><em>And just to note again, if you think this is all very interesting then I can highly recommend Julia Evan&#8217;s &#8220;Zine&#8221; (small-comic-book format) called &#8220;<a href=\"https:\/\/wizardzines.com\/zines\/integers-floats\/\">How Integers and Floats Work<\/a>&#8220;, and you can tinker with binary codes and numbers using her simple <a href=\"https:\/\/integer.exposed\/\">integer.exposed<\/a> tool.<\/em><\/p>\n\n\n\n<h2 class=\"wp-block-heading\">A small library class for bitwise manipulation of BigInts<\/h2>\n\n\n\n<p>The BigInt&#8217;s worked out GREAT!<\/p>\n\n\n\n<p>But I found myself doing a lot of what I called &#8220;push&#8221; and &#8220;pop&#8221;, of bits like with Arrays. Like, &#8220;Here&#8217;s a number that&#8217;s less than 15. It&#8217;s 3 bits long. Please &#8220;push&#8221; it onto the right-hand side of my BigInt.<\/p>\n\n\n\n<p>(A push &#8220;left shifts&#8221; the bits of the BigInt to the left and then does a logical OR to add the new bits on. A pull does a logical &#8220;AND&#8221; of the BigInt with a mask like <code>1111111<\/code> to get the popped value, and then &#8220;right shifts&#8221; the BigInt to move everything along.)<\/p>\n\n\n\n<p>Abstracting this made my encoding and decoding work much easier. And I included functions\/methods to convert the BigInt to and from both ASCII (7 bits at a time!) and then also into Base64, which can be sent in a URL! YAY!<\/p>\n\n\n\n<p>You can see that little helper class in <a href=\"https:\/\/gist.github.com\/rosswintle\/94f7778a2cad77eb4520490ed61d99e1\">this Gist<\/a>.<\/p>\n\n\n\n<h2 class=\"wp-block-heading\">Making the game work<\/h2>\n\n\n\n<p>With all that binary data representation done, I could get on with building the game.<\/p>\n\n\n\n<p>It turns out that complex game UI and logic can be a bit tricky. I&#8217;ve got the game to a state where it works in it&#8217;s basic form. It&#8217;s playable. And that&#8217;s great.<\/p>\n\n\n\n<p>I could write a whole other post about all the user interface concerns and algorithms for doing stuff.<\/p>\n\n\n\n<p>I mean, it&#8217;s not <strong>hard<\/strong> hard. It&#8217;s not Tears of the Kingdom or Call of Duty. But for a little web-based side-project? There&#8217;s been a lot to think about.<\/p>\n\n\n\n<p>Right now I&#8217;m doing some simple play testing of the mechanic of sending links back and forth. Interestingly, most of the feedback I&#8217;ve had has either been about Scrabble stuff that I&#8217;ve not implemented yet, or about the UI. No one has really complained that sending links back and forth over messenger is annoying. So that&#8217;s good.<\/p>\n\n\n\n<p>Why not give it a go? It&#8217;s at <a href=\"https:\/\/words.pico.games\/\">https:\/\/words.pico.games\/<\/a>, and it&#8217;s totally free. <\/p>\n\n\n\n<p>Let me know what you think, but be sure to check GitHub issues before you report anything to see if I already know about it.<\/p>\n\n\n\n<p>Enjoy!<\/p>\n\n\n\n<ol><\/ol>\n",
        "excerpt": "<p>I made a server-less Scrabble clone that saves data in URLs. This post explains why and how, including a primer on binary data representations, and a little JavaScript library to help do this using BigInts!<\/p>\n",
        "parentId": 0,
        "authorId": 2,
        "featuredMediaId": 0
    }
]